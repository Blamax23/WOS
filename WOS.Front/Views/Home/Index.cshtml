@using WOS.Model;

@model HomeViewModel;

@{
    ViewData["Title"] = "Accueil WOS";
    bool first = true;
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
<link rel="stylesheet" href="~/css/home/accueil.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/items/itemSneaker.css" asp-append-version="true" />

<div class="content">
    <div class="homescreen">
        <div class="logoWos">
            <div class="chaussure" id="chaussure-gauche"></div>
            <div class="chaussure" id="chaussure-centre"></div>
            <img class="logoPrincipal" src="~/src/WosLogos/LogoWosArgent.png" />
            <div class="chaussure" id="chaussure-droite"></div>
        </div>
    </div>
    <div class="content-products">
        @if (Model.RowHome.Count() > 0)
        {
            foreach (var row in Model.RowHome)
            {
                <div class="tendance-product-zone">
                    <h2>@row.Name</h2>
                    <div class="tendance-product-row">
                        @if (row.Produits.Count() > 3)
                        {
                            <button class="carousel-arrow left-arrow">&#10094;</button>
                        }
                        <div class="shoe-carousel-container">
                            <div class="shoe-carousel">
                                @if (row.Produits.Count() > 0)
                                {
                                    if(first && row.Produits.Count() > 3)
                                    {
                                        first = false;
                                        
                                    }
                                    @for (var i = 0; i < 8; i++)
                                    {
                                        @if(i < row.Produits.Count())
                                        {
                                            @if (row.Produits[i].ProduitTailles.Any(pt => pt.Stock > 0) && row.Produits[i].Actif)
                                            {
                                                ProduitTaille productWithPromo = new ProduitTaille();
                                                if (row.Produits[i].ProduitTailles.Where(t => t.PrixPromo != null).Count() > 0)
                                                {
                                                    productWithPromo = row.Produits[i].ProduitTailles.Where(t => t.PrixPromo != null).OrderBy(t => t.PrixPromo).First();
                                                }
                                                else
                                                {
                                                    productWithPromo = row.Produits[i].ProduitTailles.OrderBy(t => t.Prix).First();
                                                }
                                                <a href="@Url.Action("ViewProduct", "Product", new { id = row.Produits[i].Id })" class="product">
                                                    <div class="product-img">
                                                        <img src="@Url.Content(row.Produits[i].ProduitImages.FirstOrDefault(i => i.Principale)?.Url ?? "~/images/default.jpg")" alt="@row.Produits[i].Nom" />
                                                    </div>
                                                    <div class="product-info">
                                                        <p class="product-name">@row.Produits[i].Nom</p>
                                                        <div class="prices">
                                                            @if (productWithPromo.PrixPromo != null)
                                                            {
                                                                <p>à partir de <span class="price">@productWithPromo.PrixPromo.Value.ToString("C")</span> <span class="old-price">@productWithPromo.Prix.ToString("C")</span></p>
                                                            }
                                                            else
                                                            {
                                                                <p>à partir de <span class="price">@productWithPromo.Prix.ToString("C")</span></p>
                                                            }
                                                        </div>
                                                    </div>
                                                </a>
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    <h3>Il n'y a encore aucun produit pour cette marque/catégorie</h3>
                                }
                            </div>
                        </div>
                        @if(row.Produits.Count() > 3)
                        {
                            <button class="carousel-arrow right-arrow">&#10095;</button>
                        }
                    </div>
                </div>

            }
        }

        <div class="atouts">
            <div class="atout">
                <i class="bi bi-truck"></i>
                <h3>Livraison rapide et soignée</h3>
                <p>Nous livrons dans les plus courts délais et toujours bien emballé. </p>
            </div>
            <div class="atout">
                <i class="bi bi-patch-check"></i>
                <h3>Produits authentiques</h3>
                <p>Nous contrôlons chaque produit afin de garantir son authenticité.</p>
            </div>
            <div class="atout">
                <i class="bi bi-credit-card"></i>
                <h3>Paiement sécurisé</h3>
                <p>Nous utilisons des moyens de paiement sécurisés pour garantir la sécurité de vos données.</p>
            </div>
            <div class="atout">
                <i class="bi bi-arrow-repeat"></i>
                <h3>Retour facile</h3>
                <p>Vous avez jusqu'à 14 jours pour être satisfait ou remboursé.</p>
            </div>
        </div>
    </div>
</div>



<script src="~/js/chaussure.js" asp-append-version="true"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

<script>
    $(document).ready(function () {
        $('.shoe-carousel-container').each(function () {
            const $container = $(this);
            const $carousel = $container.find('.shoe-carousel');
            const $leftArrow = $container.parent().find('.left-arrow');
            const $rightArrow = $container.parent().find('.right-arrow');

            // On récupère les éléments originaux
            const $originalItems = $carousel.find('.product');
            const itemWidth = $originalItems.first().outerWidth(true);
            const scrollDistance = itemWidth + 20;
            const itemsCount = $originalItems.length;
            const totalWidth = itemWidth * itemsCount;

            let currentPosition = -totalWidth; // On commence à la deuxième ligne
            let isAnimating = false;

            // Fonction d'initialisation
            function initCarousel() {
                // On clone deux fois la ligne complète si la largeur du container divisée par la largeur d'un élément +20 est supérieure à 3
                if ($container.width() / (itemWidth + 20) > 3) {
                    const $clonedItems1 = $originalItems.clone();
                    const $clonedItems2 = $originalItems.clone();


                    // On ajoute les clones avant et après les éléments originaux
                    $carousel.prepend($clonedItems1);
                    $carousel.append($clonedItems2);

                    // On définit la largeur totale du carousel pour contenir les trois lignes
                    $carousel.css({
                        'width': (totalWidth * 3) + 'px',
                        'transform': `translateX(${currentPosition}px)`
                    });
                }
            }

            // Fonction pour mettre à jour la position avec animation
            function updatePosition(instant = false) {
                $carousel.css({
                    'transition': instant ? 'none' : 'transform 0.5s ease-in-out',
                    'transform': `translateX(${currentPosition}px)`
                });
            }

            // Fonction pour vérifier et réinitialiser la position si nécessaire
            function checkAndResetPosition() {
                setTimeout(() => {
                    if (currentPosition <= -(totalWidth * 2)) {
                        // Si on est allé trop à droite, on revient à la ligne du milieu
                        currentPosition = -totalWidth;
                        updatePosition(true);
                    } else if (currentPosition >= 0) {
                        // Si on est allé trop à gauche, on revient à la ligne du milieu
                        currentPosition = -totalWidth;
                        updatePosition(true);
                    }
                    isAnimating = false;
                }, 500);
            }

            // Gestion du défilement vers la droite
            function slideRight() {
                if (isAnimating) return;
                isAnimating = true;

                currentPosition -= scrollDistance;
                updatePosition();
                checkAndResetPosition();
            }

            // Gestion du défilement vers la gauche
            function slideLeft() {
                if (isAnimating) return;
                isAnimating = true;

                currentPosition += scrollDistance;
                updatePosition();
                checkAndResetPosition();
            }

            // Initialisation
            if ($originalItems.length > 0) {
                initCarousel();
            }

            // Écouteurs d'événements pour les flèches
            $leftArrow.on('click', slideLeft);
            $rightArrow.on('click', slideRight);

            // Gestion du redimensionnement
            $(window).on('resize', function () {
                const newItemWidth = $originalItems.first().outerWidth(true);
                const newScrollDistance = newItemWidth + 20;
                const newTotalWidth = newItemWidth * itemsCount;

                // Mettre à jour les dimensions
                currentPosition = -newTotalWidth; // Revenir à la ligne du milieu

                // Mettre à jour la largeur du carousel
                $carousel.css({
                    'width': (newTotalWidth * 3) + 'px',
                    'transition': 'none',
                    'transform': `translateX(${currentPosition}px)`
                });
            });
        });
    });
</script>


