@using WOS.Model;

@model AccountViewModel;

@{
    ViewData["Title"] = "Compte";
    // On controle si le User est un client ou un admin et on le convertit
    Client client = null;
    Admin admin = null;
    if (Model.User is Client)
    {
        client = (Client)Model.User;
    }
    else if (Model.User is Admin)
    {
        admin = (Admin)Model.User;
    }

    string errorMessage = ViewBag.ErrorMessage ?? string.Empty;

}

<link rel="stylesheet" href="~/css/account/index.css" asp-append-version="true" />

<div class="content">
    <div class="head-account">
        <h1>Mon compte</h1>
        <form method="post" asp-controller="Account" asp-action="LogOut">
            <button type="submit">Déconnexion</button>
        </form>
    </div>
    <div class="account">
        @if (admin != null)
        {
            <div class="side-nav" id="sideNav">
                <div class="nav-account">
                    <ul>
                        <li class="linkProfile" data-section="info-account">Profil</li>
                        <li class="linkCommande" data-section="info-commandes">Commandes</li>
                        <li class="linkProducts" data-section="info-products">Produits</li>
                        <li class="linkMarques" data-section="info-marques">Marques</li>
                    </ul>
                </div>
            </div>

            <div class="toggle-btn" id="toggleNav">
                <i class="bi bi-caret-right-fill"></i>
            </div>

            <div class="info-sections">
                <div class="info-account active">
                    <form method="post" asp-controller="Account" asp-action="UpdateProfile" class="formUpdateInfo">
                        <div class="head-profile">
                            <h2>Profil</h2>
                            <div class="whenForm hidden">
                                <button type="button" class="cancel-btn">Annuler</button>
                                <button type="submit" class="user-actions confirm-btn">Modifier</button>
                            </div>
                            <div class="whenInfos">
                                <button type="button" class="user-actions">Modifier</button>
                            </div>
                        </div>
                        <div class="user-zone">
                            <div class="name-zone">
                                <p><strong>Nom :</strong> @admin.Nom</p>
                                <p><strong>Prénom :</strong>  @admin.Prenom</p>
                            </div>
                            <div class="email-zone">
                                <p><strong>Email :</strong>  @admin.Email</p>
                            </div>
                        </div>
                        <div class="form-zone hidden">
                            <div class="consignes">
                                @if (ViewBag.ErrorMessage != null)
                                {
                                    <p>@ViewBag.ErrorMessage</p>
                                }
                                <p>Vous pouvez modifier vos informations personnelles ici. <br />Si vous souhaitez changer vos informations publiques, renseignez seulement le mot de passe actuel.<br /> Si vous souhaitez changer de mot de passe, renseignez le mot de passe actuel ainsi que le nouveau.</p>
                            </div>
                            <div class="inputs">
                                <div class="zone-input name-zone">
                                    <div class="input name-input">
                                        <label for="nom">Nom : </label>
                                        <input type="text" name="nom" id="nom" value="@admin.Nom" />
                                    </div>
                                    <div class="input firstname-input">
                                        <label for="prenom">Prénom : </label>
                                        <input type="text" name="prenom" id="prenom" value="@admin.Prenom" />
                                    </div>
                                </div>
                                <div class="zone-input email-zone">
                                    <div class="input email-input">
                                        <label for="email">Email : </label>
                                        <input type="text" name="email" id="email" value="@admin.Email" />
                                    </div>
                                </div>
                                <div class="zone-input password-zone">
                                    <div class="input password-input">
                                        <label for="password">Mot de passe actuel : </label>
                                        <input type="password" name="password" id="password" />
                                    </div>
                                    <div class="input newPassword-input">
                                        <label for="newPassword">Nouveau mot de passe : </label>
                                        <input type="password" name="newPassword" id="newPassword" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="info-commandes">
                    <div class="head-commandes">
                        <h2>Commandes</h2>
                        <a asp-controller="Account" asp-action="FormCommande">Ajouter une commande</a>
                    </div>
                    @if (Model.Commandes.Count > 0)
                    {
                        @foreach (var commande in Model.Commandes)
                        {
                            <div class="commande">
                                <div class="picture-zone-commande">
                                    <img src="@commande.LignesCommande.FirstOrDefault().Produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url" class="imagePresCommande" />
                                </div>
                                <div class="info-zone-commande">
                                    <div class="title-zone-info">
                                        <h3>@commande.LignesCommande.FirstOrDefault().Produit.Nom</h3>
                                    </div>
                                    <div class="detail-zone-info">
                                        <div class="date-commande">
                                            <p>Date : @commande.DateCommande</p>
                                        </div>
                                        <div class="statut-commande">
                                            <p>Statut : @commande.Statut</p>
                                        </div>
                                        <div class="total-commande">
                                            <p>Total : @commande.MontantTotal €</p>
                                        </div>
                                    </div>
                                    <div class="list-produits">
                                        <ul>
                                            @foreach (var ligne in commande.LignesCommande)
                                            {
                                                <li>@ligne.Produit.Nom</li>
                                            }
                                        </ul>
                                    </div>
                                    <a asp-controller="Account" asp-action="GetCommande" asp-route-id="@commande.Id">Voir</a>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Vous n'avez pas encore de commandes.</p>
                    }
                </div>
                <div class="info-products">
                    <div class="head-product">
                        <h2>Produits</h2>
                        <a class="confirm-btn addProduct">Ajouter un produit</a>
                    </div>
                    <form method="post" asp-action="AddProduct" enctype="multipart/form-data" asp-controller="Product" class="formAddProduct">
                        <div class="left-zone">
                            <div class="pictures-zone">
                                <div class="upload-container" id="uploadContainer">
                                    <div class="drop-area" id="dropArea">
                                        Glissez-déposez vos fichiers ici
                                        <div id="previewContainer" class="preview-container"></div>
                                    </div>
                                    <input type="file" name="Sources" id="produitSources" accept=".png" multiple style="display: none;">
                                </div>
                            </div>
                        </div>
                        <div class="right-zone">
                            <div class="content-zone general-infos active" data-order="1">
                                <div class="head-zone-product">
                                    <input type="text" name="nom" id="productName" class="inputName" placeholder="Nom de la chaussure" required />
                                </div>
                                <div class="content-zone-product">
                                    <textarea name="description" id="productDescription" class="inputDescription" placeholder="Description de la chaussure" required></textarea>
                                    <div class="zone-active checkbox-wrapper">
                                        <input type="checkbox" name="active" id="productActive" class="inputActive" />
                                        <div class="custom-checkbox"></div>
                                        <label for="productActive">Actif</label>
                                    </div>
                                    <select class="input-marque">
                                        @foreach (Marque marque in Model.Marques)
                                        {
                                            <option value="@marque.Id">@marque.Nom</option>
                                        })
                                    </select>
                                    <input type="hidden" name="marque" id="productMarque" class="inputMarque" />
                                    <select class="input-categorie">
                                        @foreach (Categorie cat in Model.Categories)
                                        {
                                            <option value="@cat.Id" data-id-marque="@cat.IdMarque">@cat.Nom</option>
                                        })
                                    </select>
                                    <input type="hidden" name="categorie" id="productCategorie" class="inputCategorie" />
                                </div>
                            </div>
                            <div class="content-zone color-infos" data-order="2">
                                <h3>Choisissez les couleurs de la chaussure</h3>
                                <div class="allColors">
                                    @foreach (ProduitCouleurEnum couleur in Enum.GetValues(typeof(ProduitCouleurEnum)))
                                    {
                                        <div class="color-zone">
                                            <div class="img-color" style="background-color: @couleur.GetHexCode();"></div>
                                            <p>@couleur</p>
                                        </div>
                                    }
                                    <input type="hidden" name="SelectedColors" id="productSelectedColors" class="inputSelectedColors" />
                                </div>
                            </div>
                            <div class="content-zone stock-infos" data-order="3">
                                <h3>Renseignez le stock pour cette chaussure</h3>
                                <div class="table-container">
                                    <table id="stockTable" class="table-stock">
                                        <thead>
                                            <tr>
                                                <th>Taille</th>
                                                <th>Quantité</th>
                                                <th>Prix (€)</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <select class="input-size">
                                                        @for (var i = 36; i <= 48; i++)
                                                        {
                                                            <option value="@i">@i</option>
                                                        })
                                                    </select>
                                                </td>
                                                <td><input type="number" class="input-quantity" placeholder="Quantité" min="0"></td>
                                                <td><input type="number" class="input-price" placeholder="Prix" step="0.01" min="0"></td>
                                                <td class="caseDeleteRow"><a class="btn-remove-row"><i class="bi bi-trash"></i></a></td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="4" class="add-row">
                                                    <a id="addRowButton" class="btn-add">+ Ajouter une ligne</a>
                                                </td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                                <input type="hidden" name="StockData" id="productStockData" class="inputStockData" />
                            </div>
                            <div class="btns-close activeBtns" data-order="1">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn nextAddProduct" data-id="1">Suivant</a>
                            </div>
                            <div class="btns-close" data-order="2">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn precedentButton" data-id="2">Précédent</a>
                                <a type="button" class="btn confirm-btn nextAddProduct" data-id="2">Suivant</a>
                            </div>
                            <div class="btns-close" data-order="3">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn precedentButton" data-id="3">Précédent</a>
                                <button type="submit" class="btn confirm-btn nextAddProduct finalBtnAddProduct">Enregistrer</button>
                            </div>
                        </div>
                    </form>
                    <div class="allProducts">
                        @if (Model.Produits.Count() > 0)
                        {
                            foreach (Produit produit in Model.Produits)
                            {
                                <div class="produit">
                                    <div class="entete-produit">
                                        <div class="left-zone-product-show">
                                            <img src="@Url.Content(@produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresProduit" />
                                        </div>
                                        <div class="center-zone-product-show">
                                            <div class="head-zone-product-show">
                                                <h3>@produit.Nom</h3>
                                            </div>
                                            <div class="content-zone-product-show">
                                                <div class="marque-zone">
                                                    <p><strong>Marque :</strong> @produit.Marque.Nom</p>
                                                </div>
                                                <div class="categorie-zone">
                                                    <p><strong>Catégorie :</strong> @produit.Categorie.Nom</p>
                                                </div>
                                                <div class="active-zone">
                                                    <form method="post" asp-action="UpdateActive" asp-asp-controller="Product" class="formUpdateActiveProduct">
                                                        <label for="active">Est ce que le produit est actif ?</label>
                                                        <input type="checkbox" name="active" class="inputActiveProduct" @(produit.Actif ? "checked" : "") />
                                                        <button type="submit" class="confirm-btn btnUpdateProductActive hidden">Modifier</button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="detail-produit">
                                        <div class="waitToShow">
                                            <button class="showMore confirm-btn">Voir plus</button>
                                        </div>
                                        <div class="stockList hidden">
                                            <h3>Tailles disponibles</h3>
                                            @if (produit.ProduitTailles.Count() > 0)
                                            {
                                                <div class="table-container">
                                                    <table id="stockTable" class="table-stock">
                                                        <thead>
                                                            <tr>
                                                                <th>Taille</th>
                                                                <th>Quantité</th>
                                                                <th>Prix (€)</th>
                                                                <th>Promotion (€)</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>

                                                            @foreach (var stock in produit.ProduitTailles)
                                                            {
                                                                <tr data-id="@stock.ProduitId">
                                                                    <td>@stock.Taille</td>
                                                                    <td>@stock.Stock</td>
                                                                    <td>@stock.Prix</td>
                                                                    <td>@stock.PrixPromo</td>
                                                                    <td class="updatePriceRow">Modifier</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <p>Aucune taille n'a été renseignée pour ce produit.</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Vous n'avez pas encore de produits.</p>
                        }
                    </div>
                </div>
                <div class="info-marques">
                    <div class="head-marque">
                        <h2>Marques</h2>
                        <div class="addBtns">
                            <a class="confirm-btn addMarque">Ajouter une marque</a>
                            <a class="confirm-btn addCategorie">Ajouter un modèle</a>
                        </div>
                    </div>
                    <div class="content-marque">
                        <form method="post" asp-controller="Marque" asp-action="AddMarque" class="formAddMarque hidden">
                            <div class="name-zone">
                                <label for="name">Nom</label>
                                <input type="text" name="name" class="inputName" />
                            </div>
                            <div class="description-zone">
                                <label for="description">Description</label>
                                <input type="hidden" name="description" class="inputDescMarque" />
                                <textarea type="text" name="description" class="textDescMarque"></textarea>
                            </div>
                            <div class="active-zone">
                                <label for="home">Page d'accueil</label>
                                <input type="checkbox" name="home" class="inputHome" />
                            </div>
                            <div class="btnFormAddMarque">
                                <a class="cancel-btn cancelAddMarque">Annuler</a>
                                <button type="submit" class="confirm-btn">Ajouter</button>
                            </div>
                        </form>

                        <form method="post" asp-controller="Categorie" asp-action="AddCategorie" class="formAddCategorie hidden">
                            <div class="head-zone-inputCat">
                                <div class="name-zone">
                                    <label for="name">Nom du modèle</label>
                                    <input type="text" name="name" class="inputName" />
                                </div>
                                <select class="input-marque-formAdd">
                                    @if (Model.Marques.Count() == 0)
                                    {
                                        <option selected>Veuillez ajouter une marque</option>
                                    }
                                    else
                                    {
                                        foreach (Marque marque in Model.Marques)
                                        {
                                            <option value="@marque.Id">@marque.Nom</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" name="marque" class="inputMarque" />
                            </div>
                            <div class="description-zone">
                                <label for="description">Description</label>
                                <input type="hidden" name="description" class="inputDescCat" />
                                <textarea type="text" class="textDescCat"></textarea>
                            </div>
                            <div class="active-zone">
                                <label for="home">Page d'accueil'</label>
                                <input type="checkbox" name="home" class="inputHome" />
                            </div>
                            <div class="btnFormAddCategorie">
                                <a class="cancel-btn cancelAddCategorie">Annuler</a>
                                <button type="submit" class="confirm-btn">Ajouter</button>
                            </div>
                        </form>
                        <div class="allMarques">
                            @if (Model.Marques.Count() == 0)
                            {
                                <h3>Aucune marque n'a été ajoutée pour l'instant.</h3>
                            }
                            else
                            {
                                @for (var i = 0; i < Model.Marques.Count(); i++)
                                {
                                    <div class="marque">
                                        <div class="head-zone-marqueShow" id="marque-@i">
                                            <div class="zone-right-marque">
                                                <div class="nameMarque">
                                                    <h3>@Model.Marques[i].Nom</h3>
                                                </div>
                                                <div class="descMarque">
                                                    <p>@Model.Marques[i].Description</p>
                                                    <form method="post" asp-action="UpdateMarque" asp-controller="Marque" class="formUpdateMarque">
                                                        <label for="isHomeCat">Est ce que la marque est affichée en page d'accueil ?</label>
                                                        <input type="checkbox" class="inputIsHomeMarque" @(Model.Marques[i].IsHome.Value ? "checked" : "") />
                                                        <input type="hidden" value="@Model.Marques[i].Id" name="id" />
                                                        <button type="submit" class="submitUpdateMarque hidden confirm-btn">Modifier</button>
                                                    </form>
                                                </div>
                                            </div>
                                            <div class="zone-left-marque">
                                                <i class="bi bi-chevron-right"></i>
                                            </div>
                                        </div>
                                        <div class="bottom-zone-marque hidden" id="categories-@i">
                                            @if (Model.Categories.Where(c => c.IdMarque == Model.Marques[i].Id).Count() == 0)
                                            {
                                                <h3>Aucun modèle n'a encore été ajouté pour cette marque.</h3>
                                            }
                                            else
                                            {
                                                <ul>
                                                    @foreach (var cat in Model.Categories.Where(c => c.IdMarque == Model.Marques[i].Id))
                                                    {
                                                        <div class="categorie">
                                                            <div class="name">
                                                                <h3>@cat.Nom</h3>
                                                            </div>
                                                            <form method="post" asp-action="UpdateCategorie" asp-controller="Categorie" class="formUpdateCat">
                                                                <label for="isHomeCat">Est ce que la catégorie est affichée en page d'accueil ?</label>
                                                                <input type="checkbox" class="inputIsHomeCat" @(Model.Categories[i].IsHome.Value ? "checked" : "") />
                                                                <input type="hidden" value="@cat.Id" name="id" />
                                                                <button type="submit" class="submitUpdateCategorie hidden confirm-btn">Modifier</button>
                                                            </form>
                                                        </div>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (client != null)
        {

        }
    </div>
</div>

<script>
    $(document).ready(function () {
        // Mettre à jour l'input hidden à chaque modification du textarea
        $('.textDescCat').on('input', function () {
            const value = $(this).val(); // Récupère la valeur du textarea
            $('.inputDescCat').val(value); // Met à jour la valeur de l'input hidden
        });

        $('.textDescMarque').on('input', function () {
            const value = $(this).val(); // Récupère la valeur du textarea
            $('.inputDescMarque').val(value); // Met à jour la valeur de l'input hidden
        });

        $('.addMarque').on('click', function () {
            let formAddMarque = $(".formAddMarque");
            if (formAddMarque.hasClass("hidden")) {
                formAddMarque.removeClass("hidden");
                formAddMarque.siblings().addClass("hidden");
            } else {
                formAddMarque.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }

        });

        $('.addCategorie').on('click', function () {
            let formAddCategorie = $(".formAddCategorie");
            if (formAddCategorie.hasClass("hidden")) {
                formAddCategorie.removeClass("hidden");
                formAddCategorie.siblings().addClass("hidden");
            } else {
                formAddCategorie.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }

        });

        $(".cancelAddMarque").on('click', function () {
            let formAddMarque = $(".formAddMarque");
            if (formAddMarque.hasClass("hidden")) {
                formAddMarque.removeClass("hidden");
                formAddMarque.siblings().addClass("hidden");
            } else {
                formAddMarque.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }
        })

        $(".cancelAddCategorie").on('click', function () {
            let formAddCategorie = $(".formAddCategorie");
            if (formAddCategorie.hasClass("hidden")) {
                formAddCategorie.removeClass("hidden");
                formAddCategorie.siblings().addClass("hidden");
            } else {
                formAddCategorie.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }
        })

        $('.input-marque-formAdd').val($('.input-marque-formAdd option:selected').val());
        $('.inputMarque').val($('.input-marque-formAdd').val());

        $('.input-marque-formAdd').change(function () {
            $('.inputMarque').val($(this).val());
        });

        $(".formUpdateMarque .inputIsHomeMarque").on("click", function (event) {
            event.stopPropagation();
            // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
            $(this).closest("form").find(".submitUpdateMarque").removeClass("hidden");
        });

        // Gérer les clics sur les checkboxes dans les catégories
        $(".formUpdateCat .inputIsHomeCat").on("click", function (event) {
            event.stopPropagation();
            // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
            $(this).closest("form").find(".submitUpdateCategorie").removeClass("hidden");
        });

        var marques = document.querySelectorAll(".head-zone-marqueShow");
        marques.forEach((marque, index) => {
            marque.addEventListener('click', function () {
                var categories = document.querySelector(`#categories-${index}`);
                var icon = marque.querySelector("i");

                // Fermez toutes les autres sections de catégories
                var allCategories = document.querySelectorAll(".bottom-zone-marque");
                var allMarques = document.querySelectorAll(".head-zone-marqueShow");

                allCategories.forEach((categorie, i) => {
                    if (i !== index) {
                        categorie.classList.add("hidden");
                        allMarques[i].style.borderBottomLeftRadius = "15px";
                        allMarques[i].style.borderBottomRightRadius = "15px";
                        allMarques[i].querySelector("i").style.transform = "rotate(0deg)";
                    }
                });

                // Basculez la catégorie actuelle
                if (categories.classList.contains("hidden")) {
                    categories.classList.remove("hidden");
                    marque.style.borderBottomLeftRadius = "0px";
                    marque.style.borderBottomRightRadius = "0px";

                    icon.style.transition = "transform 0.5s ease";
                    icon.style.transform = "rotate(90deg)";
                } else {
                    categories.classList.add("hidden");
                    marque.style.borderBottomLeftRadius = "15px";
                    marque.style.borderBottomRightRadius = "15px";

                    icon.style.transform = "rotate(0deg)";
                }
            });
        });
    });
    $(document).ready(function () {
        $('.custom-checkbox').on('click', function () {
            // On met la valeur de l'input à true si la checkbox est cochée
            if ($(this).siblings('.inputActive').is(':checked')) {
                $(this).siblings('.inputActive').prop('checked', false);
            } else {
                $(this).siblings('.inputActive').prop('checked', true);
            }
        });

        // On ajoute une valeur à productActive en fonction des clics sur custom-checkbox
        $('.custom-checkbox').on('click', function () {
            // On met la valeur de l'input à true si la checkbox est cochée
            if ($(this).siblings('.inputActive').is(':checked')) {
                $(this).siblings('.inputActive').val('true');
            } else {
                $(this).siblings('.inputActive').val('false');
            }
        });
    });

    function ShowFormUpdateProfile() {
        const formZone = $('.form-zone');
        const userZone = $('.user-zone');
        const btnForm = $(".whenForm");
        const btnInfo = $(".whenInfos");

        if (formZone.hasClass('hidden')) {
            formZone.removeClass('hidden');
            userZone.addClass('hidden');
            btnForm.removeClass('hidden');
            btnInfo.addClass('hidden');
        }
    }

    function CloseFormUpdateProfile() {
        const formZone = $('.form-zone');
        const userZone = $('.user-zone');
        const btnForm = $(".whenForm");
        const btnInfo = $(".whenInfos");

        formZone.addClass('hidden');
        userZone.removeClass('hidden');
        btnForm.addClass('hidden');
        btnInfo.removeClass('hidden');

        const inputs = formZone.find('input');
        inputs.each((index, input) => {
            input.value = input.defaultValue;
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        const toggleBtn = document.getElementById('toggleNav');
        const sideNav = document.getElementById('sideNav');
        const menuItems = sideNav.querySelectorAll('li');

        // Gestion du toggle menu
        toggleBtn.addEventListener('click', () => {
            sideNav.classList.toggle('active');
        });

        // Fermeture du menu si clic hors du menu
        document.addEventListener('click', (event) => {
            if (!sideNav.contains(event.target) && !toggleBtn.contains(event.target)) {
                sideNav.classList.remove('active');
            }
        });

        // Gestion des sections
        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                const sectionId = item.getAttribute('data-section');

                // Masquer toutes les sections
                document.querySelectorAll('.info-sections > div').forEach(section => {
                    section.classList.remove('active');
                });

                // Afficher la section sélectionnée
                document.querySelector(`.${sectionId}`).classList.add('active');

                // Fermer le menu sur mobile
                sideNav.classList.remove('active');
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggleBtn = document.getElementById('toggleNav');
        const sideNav = document.getElementById('sideNav');

        toggleBtn.addEventListener('click', () => {
            sideNav.classList.toggle('active');
        });

        // Fermer le menu si on clique en dehors
        document.addEventListener('click', (event) => {
            if (!sideNav.contains(event.target)) {
                sideNav.classList.remove('active');
            }
        });

        // Gestion des clics sur les éléments du menu
        const menuItems = document.querySelectorAll('.side-nav li');
        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                CloseFormUpdateProfile();
                // Action personnalisée selon la classe de l'élément
                switch (true) {
                    case item.classList.contains('linkProfile'):
                        console.log('Navigation vers le profil');
                        break;
                    case item.classList.contains('linkCommande'):
                        console.log('Navigation vers les commandes');
                        break;
                    case item.classList.contains('linkProducts'):
                        console.log('Navigation vers les produits');
                        break;
                    case item.classList.contains('linkMarques'):
                        console.log('Navigation vers les produits');
                        break;
                }

                // Fermer le menu après la sélection
                sideNav.classList.remove('active');
            });
        });
    });
</script>

<script>
    // On récupère le bouton modifier
    const btnUpdate = $('.user-actions');
    const btnCancel = $('.cancel-btn');

    // On ajoute un gestionnaire de click sur btnUpdate
    btnUpdate.on('click', () => {
        // On récupère la zone de formulaire
        ShowFormUpdateProfile();
    });

    btnCancel.on('click', () => {
        CloseFormUpdateProfile();
    });

    let errorMessage = '@errorMessage';
    console.log("Erreur : " + errorMessage);

    if (errorMessage !== '') {
        ShowFormUpdateProfile();
    }

    const addRowButton = $('.add-row');
    // on ajoute un gestionnaire d'événement sur le bouton d'ajout de ligne
    addRowButton.on('click', (e) => {
        e.preventDefault(); // Empêche la soumission du formulaire
        const table = $('#stockTable tbody');
        const lastRow = table.find('tr:last-child');
        const newRow = lastRow.clone(); // Clone la dernière ligne
        newRow.find('input').val(''); // Réinitialise les valeurs des inputs
        table.append(newRow); // Ajoute la nouvelle ligne à la fin du tableau

        let deleteCases = $('.caseDeleteRow');
        // On ajoute un gestionnaire d'événement pour chaque case
        deleteCases.each(function () {
            $(this).on('click', function () {
                console.log($('#stockTable tbody tr').length);
                // On supprime la ligne parent sauf si c'est la premier ligne du tableau
                if ($('#stockTable tbody tr').length > 1) {
                    $(this).parent().remove();
                }
            });
        });
    });

    let deleteCases = $('.caseDeleteRow');
    // On ajoute un gestionnaire d'événement pour chaque case
    deleteCases.each(function () {
        $(this).on('click', function () {
            console.log($('#stockTable tbody tr').length);
            // On supprime la ligne parent sauf si c'est la premier ligne du tableau
            if ($('#stockTable tbody tr').length > 1) {
                $(this).parent().remove();
            }
        });
    });


    $(document).ready(function () {
        $('.color-zone').on('click', function () {
            $(this).toggleClass('selectedColors');

            // Récupérer les couleurs sélectionnées
            const selectedColors = $('.color-zone.selectedColors')
                .map(function () {
                    return $(this).find('p').text();
                })
                .get(); // Convertir en tableau standard

            // Mettre à jour l'input caché avec les couleurs sélectionnées
            $('#productSelectedColors').val(selectedColors.join(','));
        });
    });

    let colorZones = $('.color-zone');
    let stockTable = $('#stockTable');
    let colorSelectedInput = $('#inputSelectedColors');
    let stockDataInput = $('#productStockData'); // Assure-toi que l’ID correspond bien

    colorZones.each(item => {
        $(this).on('click', function () {
            $(this).addClass('selectedColors');
        });
    });


    colorZones.each(item => {
        $(this).on('click', function () {
            $(this).toggleClass('selectedColors');

            // Récupérer les couleurs sélectionnées
            const selectedColors = $('.color-zone.selectedColors')
                .map(function () {
                    return $(this).find('p').text();
                })
                .get(); // Pour convertir l'objet jQuery en tableau standard

            colorSelectedInput.val(selectedColors.join(','));
        });
    });

    function getStockData() {
        const rows = document.querySelectorAll("#stockTable tbody tr");
        const stockData = [];

        rows.forEach(row => {
            const size = row.querySelector('.input-size')?.value || '';
            const quantity = row.querySelector('.input-quantity')?.value || '';
            const price = row.querySelector('.input-price')?.value || '';

            stockData.push({
                size: size,
                quantity: quantity,
                price: price
            });
        });

        return stockData;
    }

    // Met à jour les données dans l'input caché quand la table change
    stockTable.on('change', 'input', function () {
        const stockData = JSON.stringify(getStockData());
        stockDataInput.val(stockData); // Met à jour l'input caché
        console.log('Stock data updated:', stockData);
    });

    $(document).ready(function () {
        function updateCategorySelection() {
            const firstVisibleOption = $('.input-categorie option:visible').first();
            if (firstVisibleOption.length) {
                $('.input-categorie').val(firstVisibleOption.val());
                $('#productCategorie').val(firstVisibleOption.val());
            } else {
                // Aucune option visible, réinitialise complètement
                $('.input-categorie').val('');
                $('#productCategorie').val('');
            }
        }

        // Lors du changement de marque, filtre les catégories et met à jour la sélection
        $('.input-marque').on('change', function () {
            const selectedMarqueId = $(this).val();

            // Parcourt toutes les options des catégories
            $('.input-categorie option').each(function () {
                const idMarque = $(this).data('id-marque');
                if (idMarque == selectedMarqueId || !idMarque) {
                    $(this).show(); // Affiche les options correspondant à la marque
                } else {
                    $(this).hide(); // Cache les options qui ne correspondent pas
                }
            });

            // Met à jour la sélection de catégorie
            updateCategorySelection();

            // Met à jour la valeur de l'input caché de la marque
            $('#productMarque').val(selectedMarqueId);
            console.log('Marque sélectionnée :', selectedMarqueId);
        });

        // Lors du changement de catégorie, met à jour l'input caché "categorie"
        $('.input-categorie').on('change', function () {
            const selectedCategorieId = $(this).val();
            $('#productCategorie').val(selectedCategorieId);
            console.log('Catégorie sélectionnée :', selectedCategorieId);
        });

        updateCategorySelection();
    });
</script>

<script>
    const dropArea = document.getElementById('dropArea');
    const fileInput = document.getElementById('produitSources');
    const previewContainer = document.getElementById('previewContainer');

    // Utilisation de DataTransfer pour maintenir une liste de fichiers persistante
    let dt = new DataTransfer();

    // Empêche le comportement par défaut lors du dragover
    dropArea.addEventListener('dragover', (event) => {
        event.preventDefault();
    });

    // Gestion du drop des fichiers dans la zone de drop
    dropArea.addEventListener('drop', (event) => {
        event.preventDefault();
        const files = event.dataTransfer.files;
        addFilesToDataTransfer(files); // Ajoute les fichiers
    });

    // Ouvre l'explorateur de fichiers lorsqu'on clique sur la zone de drop
    dropArea.addEventListener('click', () => {
        fileInput.click();
    });

    // Gestion de l'ajout de fichiers via l'explorateur de fichiers
    fileInput.addEventListener('change', (event) => {
        const files = fileInput.files;
        addFilesToDataTransfer(files); // Ajoute les fichiers
    });

    function addFilesToDataTransfer(files) {
        // Parcourt les nouveaux fichiers et les ajoute à DataTransfer sans réinitialiser
        [...files].forEach(file => {
            dt.items.add(file);
            previewFile(file); // Ajoute un aperçu du fichier
        });
        updateInputFiles(); // Mets à jour l'input avec les nouveaux fichiers
    }

    function makeItemResponsive(item) {
        if (item.tagName === 'IMG') {
            item.classList.add('img-fluid');
        } else if (item.tagName === 'VIDEO') {
            item.classList.add('video-fluid');
        }
        item.style.maxWidth = '100%';
        item.style.height = 'auto';
    }

    function previewFile(file) {
        const fileReader = new FileReader();
        fileReader.onload = () => {
            const fileContainer = document.createElement('div');
            fileContainer.classList.add('file-container');

            // Affichage de l'aperçu du fichier
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = fileReader.result;
                makeItemResponsive(img);
                fileContainer.appendChild(img);
            } else if (file.type.startsWith('video/')) {
                const video = document.createElement('video');
                video.controls = true;
                video.src = fileReader.result;
                makeItemResponsive(video);
                fileContainer.appendChild(video);
            }

            // Ajoute une icône de suppression
            const deleteIcon = document.createElement('i');
            deleteIcon.className = "bi bi-trash delete-icon";
            deleteIcon.onclick = () => {
                event.stopPropagation();
                fileContainer.remove();
                removeFile(file); // Supprime le fichier si on clique sur la poubelle
            };
            fileContainer.appendChild(deleteIcon);

            // Ajoute l'aperçu dans la zone dédiée
            previewContainer.appendChild(fileContainer);
        };
        fileReader.readAsDataURL(file);
    }

    function updateInputFiles() {
        // Met à jour le fileInput avec les fichiers dans DataTransfer
        fileInput.files = dt.files;
    }

    function removeFile(fileToRemove) {
        // Supprime un fichier du DataTransfer
        const newDataTransfer = new DataTransfer();
        [...dt.files].forEach(file => {
            if (file !== fileToRemove) {
                newDataTransfer.items.add(file); // Ajoute les fichiers sauf celui à supprimer
            }
        });
        dt = newDataTransfer; // Remplace l'ancien DataTransfer par le nouveau
        updateInputFiles(); // Met à jour l'input
    }
</script>

<script>
    let btnAddProduct = $(".addProduct");
    let formAddProduct = $(".formAddProduct");
    let allProducts = $(".allProducts");

    btnAddProduct.on('click', () => {
        if (formAddProduct.hasClass('hidden')) {
            formAddProduct.removeClass('hidden');
            allProducts.addClass('hidden');
        } else {
            formAddProduct.addClass('hidden');
            allProducts.removeClass('hidden');
        }
    });

    let btnPrecedent = $(".precedentButton");
    let formZone = $(".formAddProduct");

    btnPrecedent.each((index, btn) => {
        $(btn).on('click', () => {
            // On récupère le champ data-id
            let id = $(btn).data('id');
            let currentZone = $(`.content-zone[data-order="${id}"]`);
            let previousZone = $(`.content-zone[data-order="${id - 1}"]`);
            let previousBtns = $(`.btns-close[data-order="${id - 1}"]`);
            currentZone.removeClass('active');
            previousZone.addClass('active');
            previousBtns.addClass('activeBtns');
            previousBtns.siblings().removeClass('activeBtns');
        });
    });


    let btnsClose = $(".btns-close");
    let cancelBtn = btnsClose.find('.cancel-btn');
    let nextBtn = btnsClose.find('.nextAddProduct');

    nextBtn.each((index, btn) => {
        $(btn).on('click', () => {
            // On récupère le champ data-id
            let id = $(btn).data('id');
            let currentZone = $(`.content-zone[data-order="${id}"]`);
            if (id < 3) {
                let nextZone = $(`.content-zone[data-order="${id + 1}"]`);
                let nextBtns = $(`.btns-close[data-order="${id + 1}"]`);
                currentZone.removeClass('active');
                nextZone.addClass('active');
                nextBtns.addClass('activeBtns');
                nextBtns.siblings().removeClass('activeBtns');
            }
            else {
                let nextZone = $(`.content-zone[data-order="${id + 1}"]`);
                let nextBtns = $(`.btns-close[data-order="${id + 1}"]`);
                currentZone.removeClass('active');
                nextZone.addClass('active');
                nextBtns.addClass('activeBtns');
                nextBtns.siblings().removeClass('activeBtns');
            }

        });
    })

    cancelBtn.each((index, btn) => {
        $(btn).on('click', () => {
            let formAddProduct = $(".formAddProduct");
            let allProducts = $(".allProducts");

            if (formAddProduct.hasClass('hidden')) {
                formAddProduct.removeClass('hidden');
                allProducts.addClass('hidden');
            } else {
                formAddProduct.addClass('hidden');
                allProducts.removeClass('hidden');
            }

            const inputs = formZone.find('input');
            inputs.each((index, input) => {
                input.value = input.defaultValue;
            });

            const textareas = formZone.find('textarea');
            textareas.each((index, textarea) => {
                textarea.value = textarea.defaultValue;
            });

            const checkboxes = formZone.find('input[type="checkbox"]');
            checkboxes.each((index, checkbox) => {
                checkbox.checked = checkbox.defaultChecked;
            });

            const stockTable = formZone.find('#stockTable');
            stockTable.find('tbody tr').remove();

            const previewContainer = formZone.find('#previewContainer');
            previewContainer.empty();

            const colorZones = formZone.find('.color-zone');
            colorZones.each((index, colorZone) => {
                $(colorZone).removeClass('selectedColors');
            });

            const selectedColorsInput = formZone.find('#productSelectedColors');
            selectedColorsInput.val('');

            const stockDataInput = formZone.find('#productStockData');
            stockDataInput.val('');

            const generalInfos = formZone.find('.general-infos');
            generalInfos.addClass('active');
            generalInfos.siblings().removeClass('active');

            // On remet le premier content zone actif
            let firstContentZone = $(`.content-zone[data-order="1"]`);
            firstContentZone.addClass('active');
            firstContentZone.siblings().removeClass('active');

            // On remet le premier btns-close actif
            let firstBtnsClose = $(`.btns-close[data-order="1"]`);
            firstBtnsClose.addClass('activeBtns');
            firstBtnsClose.siblings().removeClass('activeBtns');
        });
    });


    let divActive = $(".activeBtns");
    let divSecond = $(".btns-second");
    let divThird = $(".btns-third");

    let btnNext = $(".nextAddProduct");
    let btnPrev = $(".btns-second .confirm-btn");
    let btnPrev2 = $(".btns-third .confirm-btn");
</script>

<script>
    $(".formUpdateActiveProduct .inputActiveProduct").on("click", function (event) {
        event.stopPropagation();
        // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
        $(this).closest("form").find(".btnUpdateProductActive").removeClass("hidden");
    });

    let deroules = $(".showMore");
    // On affiche les stocks quand on clique sur le bouton
    deroules.each((index, deroule) => {
        $(deroule).on('click', () => {
            let stockList = $(deroule).parent().siblings('.stockList');
            if (stockList.hasClass('hidden')) {
                stockList.removeClass('hidden');
                $(deroule).text('Voir moins');
            } else {
                stockList.addClass('hidden');
                $(deroule).text('Voir plus');
            }
        });
    });

    // Clic sur le bouton modifier
    let btnUpdateRowStock = $(".updatePriceRow");
    btnUpdateRowStock.each((index, btn) => {
        $(btn).on('click', () => {
            let row = $(btn).parent();
            let inputs = row.find('td');
            let taille = inputs.eq(0).text();
            let stock = inputs.eq(1).text();
            let prix = inputs.eq(2).text();
            let promo = inputs.eq(3).text();

            // On remplace les valeurs par des inputs
            inputs.eq(1).html(`<input type="number" class="input-quantity" value="${stock}" />`);
            inputs.eq(2).html(`<input type="number" class="input-price" value="${prix}" />`);
            inputs.eq(3).html(`<input type="number" class="input-promo" value="${promo}" />`);

            // On modifie le bouton pour qu'il confirme
            $(btn).text('Confirmer');
            $(btn).removeClass('updatePriceRow');
            $(btn).addClass('confirmUpdatePriceRow');
            $(btn).addClass('confirm-btn');

            // On ajoute un bouton pour annuler
            row.append('<td class="cancelUpdatePriceRow cancel-btn">Annuler</td>');

            // On ajoute un autre th dans le thead du tableau
            let thead = $('#stockTable thead tr');
            thead.append('<th></th>');

            let cancelUpdatePriceRow = $(".cancelUpdatePriceRow");

            cancelUpdatePriceRow.each((index, btn) => {
                $(btn).on('click', () => {
                    let row = $(btn).parent();
                    let inputs = row.find('input');
                    let taille = inputs.eq(0).val();
                    let stock = inputs.eq(1).val();
                    let prix = inputs.eq(2).val();
                    let promo = inputs.eq(3).val();

                    console.log(inputs.eq(3));

                    // On remplace les inputs par les anciennes valeurs
                    inputs.eq(1).replaceWith(`<td>${stock}</td>`);
                    inputs.eq(2).replaceWith(`<td>${prix}</td>`);
                    inputs.eq(3).replaceWith(`<td>${promo}</td>`);

                    // On remet le bouton modifier
                    $(btn).text('Modifier');
                    $(btn).removeClass('confirmUpdatePriceRow');
                    $(btn).addClass('updatePriceRow');

                    // On supprime le bouton annuler
                    row.find('.cancelUpdatePriceRow').remove();
                });
            });

            let confirmUpdatePriceRow = $(".confirmUpdatePriceRow");
            confirmUpdatePriceRow.each((index, btn) => {
                $(btn).on('click', () => {
                    // On récupère le tr
                    let tr = $(btn).parent().parent();
                    // on récupère la valeur de son champ data-id
                    let idProduit = $(tr).data('id-produit');
                    let taille = $(tr).data('taille');
                    console.log(idProduit);
                    console.log(taille);


                    let row = $(btn).parent();
                    let inputs = row.find('input');
                    let stock = inputs[0].val();
                    let prix = inputs[1].val();
                    let promo = inputs[2].val();

                    console.log(inputs);
                    console.log(taille);
                    console.log(stock);
                    console.log(prix);
                    console.log(promo);

                    // On remplace les inputs par les nouvelles valeurs
                    inputs.eq(1).replaceWith(`<td>${stock}</td>`);
                    inputs.eq(2).replaceWith(`<td>${prix}</td>`);
                    inputs.eq(3).replaceWith(`<td>${promo}</td>`);

                    // On remet le bouton modifier
                    $(btn).text('Modifier');
                    $(btn).removeClass('confirmUpdatePriceRow');
                    $(btn).addClass('updatePriceRow');

                    // On supprime le bouton annuler
                    row.find('.cancelUpdatePriceRow').remove();

                    // On supprime le th ajouté
                    $('#stockTable thead tr th:last-child').remove();


                    // On récupère le tr
                    let tr = $(btn).parent().parent();
                    // on récupère la valeur de son champ data-id
                    let idProduit = $(tr).data('id');
                    console.log(idProduit);



                    // On met à jour les valeurs dans la base de données
                    let size = taille;
                    let quantity = stock;
                    let price = prix;
                    let priceProm = promo;
                    // On crée un objet stockData
                    let stockData = {
                        size: size,
                        quantity: quantity,
                        price: price,
                        priceProm: priceProm
                    };
                    let url = `/Product/UpdateStockProduct?id=${idProduit}&StockData=${stockData}`;
                    $.ajax({
                        url: url,
                        type: 'POST',
                        success: function (data) {
                            console.log(data);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                });
            });

        });
    });

</script>
