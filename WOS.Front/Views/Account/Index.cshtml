@using WOS.Model;

@model AccountViewModel;

@{
    ViewData["Title"] = "Compte";
    // On controle si le User est un client ou un admin et on le convertit
    Client client = null;
    Admin admin = null;
    if (Model.User is Client)
    {
        client = (Client)Model.User;
    }
    else if (Model.User is Admin)
    {
        admin = (Admin)Model.User;
    }

    string errorMessage = ViewBag.ErrorMessage ?? string.Empty;

}

<link rel="stylesheet" href="~/css/account/index.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/items/itemColor.css" asp-append-version="true" />

<div class="content">
    <div class="head-account">
        <h1>Mon compte</h1>
        <form method="post" asp-controller="Account" asp-action="LogOut">
            <button type="submit">Déconnexion</button>
        </form>
    </div>
    <div class="account">
        @if (admin != null)
        {
            <div class="side-nav" id="sideNav">
                <div class="nav-account">
                    <ul>
                        <li class="linkProfile" data-section="info-account">Profil</li>
                        <li class="linkCommande" data-section="info-commandes">Commandes</li>
                        <li class="linkProducts" data-section="info-products">Produits</li>
                        <li class="linkMarques" data-section="info-marques">Marques</li>
                        <li class="linkLivraison" data-section="info-livraison">Livraison</li>
                        <li class="linkCodePromo" data-section="info-code-promos">Codes Promo</li>
                    </ul>
                </div>
            </div>

            <div class="toggle-btn" id="toggleNav">
                <i class="bi bi-caret-right-fill"></i>
            </div>

            <div class="info-sections">
                <div class="info-account">
                    <div class="formUpdateInfo">
                        <div class="head-profile">
                            <h2>Profil</h2>
                            <div class="whenForm hidden">
                                <button type="button" class="cancel-btn">Annuler</button>
                                <button type="submit" class="user-actions confirm-btn confirm-update-profile">Modifier</button>
                            </div>
                            <div class="whenInfos">
                                <button type="button" class="user-actions">Modifier</button>
                            </div>
                        </div>
                        <div class="user-zone">
                            <div class="name-zone">
                                <p><strong>Nom :</strong> <p id="displayNom">@admin.Nom</p></p>
                                <p><strong>Prénom :</strong>  <p id="displayPrenom">@admin.Prenom</p></p>
                            </div>
                            <div class="email-zone">
                                <p><strong>Email :</strong>  <p id="displayEmail">@admin.Email</p></p>
                            </div>
                        </div>
                        <div class="form-zone hidden">
                            <div class="consignes">
                                <p class="errorUpdateProfil"></p>
                                <p>Vous pouvez modifier vos informations personnelles ici. <br />Si vous souhaitez changer vos informations publiques, renseignez seulement le mot de passe actuel.<br /> Si vous souhaitez changer de mot de passe, renseignez le mot de passe actuel ainsi que le nouveau.</p>
                            </div>
                            <div class="inputs">
                                <div class="zone-input name-zone">
                                    <div class="input name-input">
                                        <label for="nom">Nom : </label>
                                        <input type="text" name="nom" id="nom" />
                                    </div>
                                    <div class="input firstname-input">
                                        <label for="prenom">Prénom : </label>
                                        <input type="text" name="prenom" id="prenom" />
                                    </div>
                                </div>
                                <div class="zone-input email-zone">
                                    <div class="input email-input">
                                        <label for="email">Email : </label>
                                        <input type="text" name="email" id="email" />
                                    </div>
                                </div>
                                <div class="zone-input password-zone">
                                    <div class="input password-input">
                                        <label for="password">Mot de passe actuel : </label>
                                        <input type="password" name="password" id="password" />
                                    </div>
                                    <div class="input newPassword-input">
                                        <label for="newPassword">Nouveau mot de passe : </label>
                                        <input type="password" name="newPassword" id="newPassword" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="info-commandes">
                    <div class="head-commandes">
                        <h2>Commandes</h2>
                    </div>
                    @if (Model.Commandes.Count > 0)
                    {
                        @foreach (var commande in Model.Commandes.OrderByDescending(c => c.DateCommande))
                        {
                            <div class="commande">
                                <div class="head-informations">
                                    <div class="picture-zone-commande">
                                        @if (commande.LignesCommande.Count() > 0)
                                        {
                                            Produit produit = Model.Produits.FirstOrDefault(p => p.Id == commande.LignesCommande.FirstOrDefault().ProduitId);
                                            <img src="@Url.Content(produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresCommande" />
                                        }
                                    </div>
                                    <div class="info-zone-commande">
                                        <div class="title-zone-info">
                                            @* @if (commande.LignesCommande.Count() > 0)
                                {
                                Produit produit = Model.Produits.FirstOrDefault(p => p.Id == commande.LignesCommande.FirstOrDefault().ProduitId);
                                <h3>@produit.Nom</h3>
                                } *@
                                            <h3>Commande n°@commande.NumeroCommande</h3>
                                        </div>
                                        <div class="detail-zone-info">
                                            <div class="date-commande">
                                                <p><strong>Date : </strong></p>
                                                @commande.DateCommande
                                            </div>
                                            <div class="statut-commande">
                                                <p><strong>Statut : </strong></p>
                                                <p>@commande.Statut.Libelle</p>
                                            </div>
                                            <div class="total-commande">
                                                <p><strong>Total : </strong></p>
                                                <p>@commande.MontantTotal.ToString("C")</p>
                                            </div>
                                            <div class="livraison-estimee">
                                                <p><strong>Date de livraison estimée : </strong></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="btns-commande">
                                    <button class="showMoreCommande confirm-btn">Voir détails</button>
                                    <button class="showActions confirm-btn">Voir actions</button>
                                </div>
                                <div class="details-commande hidden">
                                    <h3>Détails</h3>
                                    <div class="list-produits-commande">
                                        @if (commande.LignesCommande.Count() > 0)
                                        {
                                            @foreach (var itemCommande in commande.LignesCommande)
                                            {
                                                Produit produit = Model.Produits.FirstOrDefault(p => p.Id == itemCommande.ProduitId);
                                                <div class="produit-commande">
                                                    <div class="picture-zone-item">
                                                        <img src="@Url.Content(produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresCommande" />
                                                    </div>
                                                    <div class="info-zone-item">
                                                        <div class="title-zone-item">
                                                            <h3>@produit.Nom</h3>
                                                        </div>
                                                        <div class="detail-zone-item">
                                                            <div class="taille-item">
                                                                <p><strong>Taille : </strong></p>
                                                                <p>@produit.ProduitTailles.FirstOrDefault(pt => pt.Id == itemCommande.ProduitTailleId).Taille</p>
                                                            </div>
                                                            <div class="quantite-item">
                                                                <p><strong>Quantité : </strong></p>
                                                                <p>@itemCommande.Quantite</p>
                                                            </div>
                                                            <div class="prix-item">
                                                                <p><strong>Prix : </strong></p>
                                                                <p>@((itemCommande.PrixUnitaire * itemCommande.Quantite).ToString("C"))</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                                <div class="actions-commande hidden">
                                    <h3>Actions</h3>
                                    <div class="list-actions">
                                        <div class="etiquette" data-commande-id="@commande.NumeroCommande">
                                            <i class="bi bi-send-arrow-down"></i>
                                            <p>Télécharger l'étiquette d'envoi</p>
                                        </div>
                                        <div class="facture" data-commande-id="@commande.NumeroCommande">
                                            <i class="bi bi-file-earmark-arrow-down"></i>
                                            <p>Télécharger la facture</p>
                                        </div>
                                        <div class="updateStatus open-modal-btn" data-commande-id="@commande.NumeroCommande" data-status-id="@commande.Statut.Id">
                                            <i class="bi bi-pencil-square"></i>
                                            <p>Modifier le statut</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Vous n'avez pas encore de commandes.</p>
                    }
                </div>
                <div class="info-products">
                    <div class="head-product">
                        <h2>Produits</h2>
                        <a class="confirm-btn addProduct">Ajouter un produit</a>
                    </div>
                    <form method="post" asp-action="AddProduct" enctype="multipart/form-data" asp-controller="Product" class="formAddProduct hidden">
                        <div class="left-zone">
                            <div class="pictures-zone">
                                <div class="upload-container" id="uploadContainer">
                                    <div class="drop-area" id="dropArea">
                                        Glissez-déposez vos fichiers ici
                                        <div id="previewContainer" class="preview-container"></div>
                                    </div>
                                    <input type="file" name="Sources" id="produitSources" accept=".png" multiple style="display: none;">
                                </div>
                            </div>
                        </div>
                        <div class="right-zone">
                            <div class="content-zone general-infos active" data-order="1">
                                <div class="head-zone-product">
                                    <input type="text" name="nom" id="productName" class="inputName" placeholder="Nom de la chaussure" required />
                                </div>
                                <div class="content-zone-product">
                                    <textarea name="description" id="productDescription" class="inputDescription" placeholder="Description de la chaussure" required></textarea>
                                    <div class="zone-active checkbox-wrapper">
                                        <input type="checkbox" name="active" id="productActive" class="inputActive" />
                                        <div class="custom-checkbox"></div>
                                        <label for="productActive">Actif</label>
                                    </div>
                                    <select class="input-marque">
                                        @foreach (Marque marque in Model.Marques)
                                        {
                                            <option value="@marque.Id">@marque.Nom</option>
                                        })
                                    </select>
                                    <input type="hidden" name="marque" id="productMarque" class="inputMarque" />
                                    <select class="input-categorie">
                                        @foreach (Categorie cat in Model.Categories)
                                        {
                                            <option value="@cat.Id" data-id-marque="@cat.IdMarque">@cat.Nom</option>
                                        })
                                    </select>
                                    <input type="hidden" name="categorie" id="productCategorie" class="inputCategorie" />
                                </div>
                            </div>
                            <div class="content-zone color-infos" data-order="2">
                                <h3>Choisissez les couleurs de la chaussure</h3>
                                <div class="allColors">
                                    @foreach (ProduitCouleurEnum couleur in Enum.GetValues(typeof(ProduitCouleurEnum)))
                                    {
                                        <div class="color-zone">
                                            <div class="img-color" style="background-color: @couleur.GetHexCode();"></div>
                                            <p>@couleur</p>
                                        </div>
                                    }
                                    <input type="hidden" name="SelectedColors" id="productSelectedColors" class="inputSelectedColors" />
                                </div>
                            </div>
                            <div class="content-zone stock-infos" data-order="3">
                                <h3>Renseignez le stock pour cette chaussure</h3>
                                <div class="table-container">
                                    <table id="stockTable" class="table-stock">
                                        <thead>
                                            <tr>
                                                <th>Taille</th>
                                                <th>Quantité</th>
                                                <th>Prix (€)</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <select class="input-size">
                                                        @for (double i = 36; i <= 48; i += 0.5)
                                                        {
                                                            <option value="@i">@i</option>
                                                        })
                                                    </select>
                                                </td>
                                                <td><input type="number" class="input-quantity" placeholder="Quantité" min="0"></td>
                                                <td><input type="number" class="input-price" placeholder="Prix" step="0.01" min="0"></td>
                                                <td class="caseDeleteRow"><a class="btn-remove-row"><i class="bi bi-trash"></i></a></td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="4" class="add-row">
                                                    <a id="addRowButton" class="btn-add">+ Ajouter une ligne</a>
                                                </td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                                <input type="hidden" name="StockData" id="productStockData" class="inputStockData" />
                            </div>
                            <div class="btns-close activeBtns" data-order="1">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn nextAddProduct" data-id="1">Suivant</a>
                            </div>
                            <div class="btns-close" data-order="2">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn precedentButton" data-id="2">Précédent</a>
                                <a type="button" class="btn confirm-btn nextAddProduct" data-id="2">Suivant</a>
                            </div>
                            <div class="btns-close" data-order="3">
                                <a type="button" class="btn cancel-btn">Annuler</a>
                                <a type="button" class="btn confirm-btn precedentButton" data-id="3">Précédent</a>
                                <button type="submit" class="btn confirm-btn nextAddProduct finalBtnAddProduct">Enregistrer</button>
                            </div>
                        </div>
                    </form>
                    <div class="allProducts">
                        @if (Model.Produits.Count() > 0)
                        {
                            foreach (Produit produit in Model.Produits)
                            {
                                <div class="produit" data-id-produit="@produit.Id">
                                    <div class="entete-produit">
                                        <div class="left-zone-product-show">
                                            <img src="@Url.Content(@produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresProduit" />
                                        </div>
                                        <div class="center-zone-product-show">
                                            <div class="head-zone-product-show">
                                                <h3>@produit.Nom</h3>
                                            </div>
                                            <div class="content-zone-product-show">
                                                <div class="marque-zone">
                                                    <p><strong>Marque :</strong> @produit.Marque.Nom</p>
                                                </div>
                                                <div class="categorie-zone">
                                                    <p><strong>Catégorie :</strong> @produit.Categorie.Nom</p>
                                                </div>
                                                <div class="color-zone-product">
                                                    <p><strong>Couleurs : </strong></p>
                                                    <div class="allColorsProduct">
                                                        @foreach (var couleur in produit.ProduitCouleurs.Where(c => c.ProduitId == produit.Id))
                                                        {
                                                            <div class="color-box">
                                                                <div class="color-show" style="background-color: @couleur.CodeHex"></div>
                                                                <p class="color-name">@couleur.Couleur</p>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="active-zone">
                                                    <div class="formUpdateActiveProduct">
                                                        <label for="active">Est-ce que le produit est actif ?</label>
                                                        <input type="checkbox" name="active" class="inputActiveProduct" @(produit.Actif ? "checked" : "") />
                                                        <input type="hidden" name="productId" value="@produit.Id" />
                                                        <button type="submit" class="confirm-btn btnUpdateProductActive hidden">Modifier</button>
                                                    </div>
                                                    <div class="formUpdateTendanceProduct">
                                                        <label for="tendance">Est ce que le produit est en tendance ?</label>
                                                        <input type="checkbox" name="tendance" class="inputTendanceProduct" @(produit.IsTendance ? "checked" : "") />
                                                        <input type="hidden" name="productId" value="@produit.Id" />
                                                        <button type="submit" class="confirm-btn btnUpdateProductTendance hidden">Modifier</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="detail-produit">
                                        <div class="div-delete-product">
                                            <button class="btn cancel-btn delete-product" data-product-id="@produit.Id">Supprimer</button>
                                        </div>
                                        <div class="waitToShow">
                                            <button class="showMoreStock confirm-btn">Voir plus</button>
                                        </div>
                                        <div class="stockList hidden">
                                            <h3>Tailles disponibles</h3>
                                            @if (produit.ProduitTailles.Count() > 0)
                                            {
                                                <div class="table-container">
                                                    <table id="stockTableShow" class="table-stock">
                                                        <thead>
                                                            <tr>
                                                                <th>Taille</th>
                                                                <th>Quantité</th>
                                                                <th>Prix (€)</th>
                                                                <th>Promotion (€)</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody data-id-produit="@produit.Id">

                                                            @foreach (var stock in produit.ProduitTailles.OrderBy(pt => pt.Taille))
                                                            {
                                                                <tr data-id-produit="@stock.ProduitId" data-id-taille="@stock.Taille">
                                                                    <td>@stock.Taille</td>
                                                                    <td>@stock.Stock</td>
                                                                    <td>@stock.Prix</td>
                                                                    <td>@stock.PrixPromo</td>
                                                                    <td class="updatePriceRow">Modifier</td>
                                                                </tr>
                                                            }
                                                            <tr class="addRowButton">
                                                                <td colspan="5" style="text-align:center; padding:0">
                                                                    <button class="btn btn-primary confirm-btn">Ajouter une ligne</button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <p>Aucune taille n'a été renseignée pour ce produit.</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Vous n'avez pas encore de produits.</p>
                        }
                    </div>
                </div>
                <div class="info-marques">
                    <div class="head-marque">
                        <h2>Marques</h2>
                        <div class="addBtns">
                            <a class="confirm-btn addMarque">Ajouter une marque</a>
                            <a class="confirm-btn addCategorie">Ajouter un modèle</a>
                        </div>
                    </div>
                    <div class="content-marque">
                        <form method="post" asp-controller="Marque" asp-action="AddMarque" class="formAddMarque hidden">
                            <div class="name-zone">
                                <label for="name">Nom</label>
                                <input type="text" name="name" class="inputName" />
                            </div>
                            <div class="description-zone">
                                <label for="description">Description</label>
                                <input type="hidden" name="description" class="inputDescMarque" />
                                <textarea type="text" name="description" class="textDescMarque"></textarea>
                            </div>
                            <div class="active-zone">
                                <label for="home">Page d'accueil</label>
                                <input type="checkbox" name="home" class="inputHome" />
                            </div>
                            <div class="btnFormAddMarque">
                                <a class="cancel-btn cancelAddMarque">Annuler</a>
                                <button type="submit" class="confirm-btn">Ajouter</button>
                            </div>
                        </form>

                        <form method="post" asp-controller="Categorie" asp-action="AddCategorie" class="formAddCategorie hidden">
                            <div class="head-zone-inputCat">
                                <div class="name-zone">
                                    <label for="name">Nom du modèle</label>
                                    <input type="text" name="name" class="inputName" />
                                </div>
                                <select class="input-marque-formAdd">
                                    @if (Model.Marques.Count() == 0)
                                    {
                                        <option selected>Veuillez ajouter une marque</option>
                                    }
                                    else
                                    {
                                        foreach (Marque marque in Model.Marques)
                                        {
                                            <option value="@marque.Id">@marque.Nom</option>
                                        }
                                    }
                                </select>
                                <input type="hidden" name="marque" class="inputMarque" />
                            </div>
                            <div class="description-zone">
                                <label for="description">Description</label>
                                <input type="hidden" name="description" class="inputDescCat" />
                                <textarea type="text" class="textDescCat"></textarea>
                            </div>
                            <div class="active-zone">
                                <label for="home">Page d'accueil</label>
                                <input type="checkbox" name="home" class="inputHome" value="true" />
                            </div>
                            <div class="btnFormAddCategorie">
                                <a class="cancel-btn cancelAddCategorie">Annuler</a>
                                <button type="submit" class="confirm-btn">Ajouter</button>
                            </div>
                        </form>
                        <div class="allMarques">
                            @if (Model.Marques.Count() == 0)
                            {
                                <h3>Aucune marque n'a été ajoutée pour l'instant.</h3>
                            }
                            else
                            {
                                @for (var i = 0; i < Model.Marques.Count(); i++)
                                {
                                    <div class="marque" data-id-produit="@Model.Marques[i].Id">
                                        <div class="entete-marque">
                                            <div class="nameMarque">
                                                <h3>@Model.Marques[i].Nom</h3>
                                            </div>
                                            <div class="descMarque">
                                                <p>@Model.Marques[i].Description</p>
                                                <div class="active-zone">
                                                    <div class="formUpdateHomeMarque">
                                                        <label for="active">Est-ce que la marque est en page d'accueil ?</label>
                                                        <input type="checkbox" name="tendance" class="inputActiveMarque" @(Model.Marques[i].IsHome.Value ? "checked" : "") />
                                                        <input type="hidden" name="marqueId" value="@Model.Marques[i].Id" />
                                                        <button type="submit" class="confirm-btn btnUpdateMarqueHome hidden">Modifier</button>
                                                    </div>
                                                    <p class="errorUpdateMarque"></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="detail-produit">
                                            <div class="div-delete-product">
                                                <button class="btn cancel-btn delete-marque" data-marque-id="@Model.Marques[i].Id">Supprimer</button>
                                            </div>
                                            <div class="waitToShow">
                                                <button class="showMoreCategory confirm-btn">Voir plus</button>
                                            </div>
                                            <div class="categoryList hidden">
                                                <h3>Catégories</h3>
                                                @if (Model.Categories.Where(c => c.IdMarque == Model.Marques[i].Id).Count() == 0)
                                                {
                                                    <h3>Aucun modèle n'a encore été ajouté pour cette marque.</h3>
                                                }
                                                else
                                                {
                                                    <ul>
                                                        @foreach (var cat in Model.Categories.Where(c => c.IdMarque == Model.Marques[i].Id))
                                                        {
                                                            <div class="categorie">
                                                                <div class="name">
                                                                    <h3>@cat.Nom</h3>
                                                                </div>
                                                                <div class="formUpdateHomeCategory">
                                                                    <label for="active">Est-ce que la catégorie est en page d'accueil ?</label>
                                                                    <input type="checkbox" name="tendance" class="inputActiveCategory" @(cat.IsHome.Value ? "checked" : "") />
                                                                    <input type="hidden" name="categoryId" value="@cat.Id" />
                                                                    <button type="submit" class="confirm-btn btnUpdateCategoryHome hidden">Modifier</button>
                                                                </div>
                                                            </div>
                                                        }
                                                    </ul>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="info-livraison">
                    <div class="head-livraison">
                        <h1>Mode de livraison</h1>
                    </div>
                    @foreach (var mode in Model.ModeLivraisons)
                    {
                        <div class="mode-livraison">
                            <div class="left-zone">
                                <img src="@Url.Content(mode.PathLogo)" />
                            </div>
                            <div class="right-zone">
                                <div class="name-zone">
                                    <h3>@mode.Nom</h3>
                                </div>
                                <form class="price-zone">
                                    <label for="price">Prix</label>
                                    <input type="number" name="price" class="input-price" step="0.01" value="@mode.PrixLivraison.ToString(System.Globalization.CultureInfo.InvariantCulture)" />
                                    <label for="deliveryTime">Durée de livraison (j)</label>
                                    <input type="number" name="deliveryTime" class="input-delivery-time" value="@mode.JoursLivraisonMini" />
                                    <button type="submit" class="confirm-btn update-delivery-mode" data-mode-id="@mode.Id">Modifier</button>
                                </form>
                            </div>
                        </div>
                    }
                </div>
                <div class="info-code-promos">
                    <div class="head-code-promos">
                        <h2>Code Promos</h2>
                        <button type="button" class="add-code-promo confirm-btn">Ajouter un code</button>
                    </div>
                    <div class="content-code-promos">
                        <div class="form hidden">
                            <div class="form-code-promo">
                                <div class="nom-code-zone">
                                    <label for="nom">Nom du code</label>
                                    <input type="text" name="nom" class="input-nom-code" />
                                    <p class="error-code error-nom-code"></p>
                                </div>
                                <div class="pourcentage-code-zone">
                                    <label for="pourcentage">Pourcentage de réduction</label>
                                    <input type="number" name="pourcentage" class="input-pourcentage-code" max="100" min="0" />
                                    <p class="error-code error-pourcentage-code"></p>
                                </div>
                                <div class="date-code-zone">
                                    <label for="date">Date de fin</label>
                                    <input type="date" name="date" class="input-date-code" />
                                    <p class="error-code error-date-code"></p>
                                </div>
                                <div class="valid-code-zone">
                                    <label for="valid">Est ce que le code est valable ?</label>
                                    <input type="checkbox" name="valid" class="input-valid-code" />
                                </div>
                            </div>
                            <div class="zone-btns">
                                <button class="cancel-btn cancel-add-code-promo">Annuler</button>
                                <button type="submit" class="confirm-btn confirm-add-code-promo">Ajouter</button>
                            </div>
                        </div>
                        <div class="list-code-promos">
                            @if (Model.CodePromo != null)
                            {
                                if (Model.CodePromo.Count() == 0)
                                {
                                    <h3>Aucun code promo n'a été ajouté pour l'instant.</h3>
                                }
                                else
                                {
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>Nom</th>
                                                <th>Pourcentage</th>
                                                <th>Date de fin</th>
                                                <th>Valable</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody class="list-code">
                                            @foreach (var code in Model.CodePromo)
                                            {
                                                <tr>
                                                    <td>@code.Nom</td>
                                                    <td>@code.Pourcentage %</td>
                                                    <td>@code.ValidityDate</td>
                                                    <td><input type="checkbox" class="inputValidity" @(code.IsValid.Value ? "checked" : "") /></td>
                                                    <td class="delete-code-promo confirm-btn" data-code-id="@code.Id">Supprimer</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (client != null)
        {
            <div class="side-nav" id="sideNav">
                <div class="nav-account">
                    <ul>
                        <li class="linkProfile" data-section="info-account">Profil</li>
                        <li class="linkCommande" data-section="info-commandes">Commandes</li>
                    </ul>
                </div>
            </div>

            <div class="toggle-btn" id="toggleNav">
                <i class="bi bi-caret-right-fill"></i>
            </div>

            <div class="info-sections">
                <div class="info-account">
                    <div class="formUpdateInfo">
                        <div class="head-profile">
                            <h2>Profil</h2>
                            <div class="whenForm hidden">
                                <button type="button" class="cancel-btn">Annuler</button>
                                <button type="submit" class="user-actions confirm-btn confirm-update-profile">Modifier</button>
                            </div>
                            <div class="whenInfos">
                                <button type="button" class="user-actions">Modifier</button>
                            </div>
                        </div>
                        <div class="user-zone">
                            <div class="name-zone">
                                <p><strong>Nom :</strong> <p id="displayNom">@client.Nom</p></p>
                                <p><strong>Prénom :</strong>  <p id="displayPrenom">@client.Prenom</p></p>
                            </div>
                            <div class="email-zone">
                                <p><strong>Email :</strong>  <p id="displayEmail">@client.Email</p></p>
                            </div>
                        </div>
                        <div class="form-zone hidden">
                            <div class="consignes">
                                <p class="errorUpdateProfil"></p>
                                <p>Vous pouvez modifier vos informations personnelles ici. <br />Si vous souhaitez changer vos informations publiques, renseignez seulement le mot de passe actuel.<br /> Si vous souhaitez changer de mot de passe, renseignez le mot de passe actuel ainsi que le nouveau.</p>
                            </div>
                            <div class="inputs">
                                <div class="zone-input name-zone">
                                    <div class="input name-input">
                                        <label for="nom">Nom : </label>
                                        <input type="text" name="nom" id="nom" />
                                    </div>
                                    <div class="input firstname-input">
                                        <label for="prenom">Prénom : </label>
                                        <input type="text" name="prenom" id="prenom" />
                                    </div>
                                </div>
                                <div class="zone-input email-zone">
                                    <div class="input email-input">
                                        <label for="email">Email : </label>
                                        <input type="text" name="email" id="email" />
                                    </div>
                                </div>
                                <div class="zone-input password-zone">
                                    <div class="input password-input">
                                        <label for="password">Mot de passe actuel : </label>
                                        <input type="password" name="password" id="password" />
                                    </div>
                                    <div class="input newPassword-input">
                                        <label for="newPassword">Nouveau mot de passe : </label>
                                        <input type="password" name="newPassword" id="newPassword" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="info-commandes">
                    <div class="head-commandes">
                        <h2>Commandes</h2>
                    </div>
                    @if (Model.Commandes.Count > 0)
                    {
                        @foreach (var commande in Model.Commandes.OrderByDescending(c => c.DateCommande))
                        {
                            <div class="commande">
                                <div class="head-informations">
                                    <div class="picture-zone-commande">
                                        @if (commande.LignesCommande.Count() > 0)
                                        {
                                            Produit produit = Model.Produits.FirstOrDefault(p => p.Id == commande.LignesCommande.FirstOrDefault().ProduitId);
                                            <img src="@Url.Content(produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresCommande" />
                                        }
                                    </div>
                                    <div class="info-zone-commande">
                                        <div class="title-zone-info">
                                            @* @if (commande.LignesCommande.Count() > 0)
                                {
                                Produit produit = Model.Produits.FirstOrDefault(p => p.Id == commande.LignesCommande.FirstOrDefault().ProduitId);
                                <h3>@produit.Nom</h3>
                                } *@
                                            <h3>Commande n°@commande.NumeroCommande</h3>
                                        </div>
                                        <div class="detail-zone-info">
                                            <div class="date-commande">
                                                <p><strong>Date : </strong></p>
                                                @commande.DateCommande
                                            </div>
                                            <div class="statut-commande">
                                                <p><strong>Statut : </strong></p>
                                                <p>@commande.Statut.Libelle</p>
                                            </div>
                                            <div class="total-commande">
                                                <p><strong>Total : </strong></p>
                                                <p>@commande.MontantTotal.ToString("C")</p>
                                            </div>
                                            <div class="livraison-estimee">
                                                <p><strong>Date de livraison estimée : </strong></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="btns-commande">
                                    <button class="showMoreCommande confirm-btn">Voir détails</button>
                                    <button class="showActions confirm-btn">Voir actions</button>
                                </div>
                                <div class="details-commande hidden">
                                    <h3>Détails</h3>
                                    <div class="list-produits-commande">
                                        @if (commande.LignesCommande.Count() > 0)
                                        {
                                            @foreach (var itemCommande in commande.LignesCommande)
                                            {
                                                Produit produit = Model.Produits.FirstOrDefault(p => p.Id == itemCommande.ProduitId);
                                                <div class="produit-commande">
                                                    <div class="picture-zone-item">
                                                        <img src="@Url.Content(produit.ProduitImages.FirstOrDefault(p => p.Principale == true).Url)" class="imagePresCommande" />
                                                    </div>
                                                    <div class="info-zone-item">
                                                        <div class="title-zone-item">
                                                            <h3>@produit.Nom</h3>
                                                        </div>
                                                        <div class="detail-zone-item">
                                                            <div class="taille-item">
                                                                <p><strong>Taille : </strong></p>
                                                                <p>@produit.ProduitTailles.FirstOrDefault(pt => pt.Id == itemCommande.ProduitTailleId).Taille</p>
                                                            </div>
                                                            <div class="quantite-item">
                                                                <p><strong>Quantité : </strong></p>
                                                                <p>@itemCommande.Quantite</p>
                                                            </div>
                                                            <div class="prix-item">
                                                                <p><strong>Prix : </strong></p>
                                                                <p>@((itemCommande.PrixUnitaire * itemCommande.Quantite).ToString("C"))</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                                <div class="actions-commande hidden">
                                    <h3>Actions</h3>
                                    <div class="list-actions">
                                        <div class="etiquette" data-commande-id="@commande.NumeroCommande">
                                            <i class="bi bi-send-arrow-down"></i>
                                            <p>Télécharger l'étiquette d'envoi</p>
                                        </div>
                                        <div class="facture" data-commande-id="@commande.NumeroCommande">
                                            <i class="bi bi-file-earmark-arrow-down"></i>
                                            <p>Télécharger la facture</p>
                                        </div>
                                        <div class="updateStatus open-modal-btn" data-commande-id="@commande.NumeroCommande" data-status-id="@commande.Statut.Id">
                                            <i class="bi bi-pencil-square"></i>
                                            <p>Modifier le statut</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Vous n'avez pas encore de commandes.</p>
                    }
                </div>
            </div>
        }
    </div>
</div>

<div class="modal-delete">
    <div class="modal-content">
        <h2>Voulez-vous vraiment supprimer cet élément ?</h2>
        <div class="modal-btns">
            <button class="confirm-btn">Confirmer</button>
            <button class="cancel-btn">Annuler</button>
        </div>
    </div>
</div>

<div class="modal-status-commande">
    <div class="modal-content">
        <h2>Modifier le statut de la commande</h2>
        <form method="post" asp-action="UpdateCommandeStatus" asp-controller="Panier">
            <select name="statut" class="inputStatut">
            </select>
            <input type="hidden" name="commandeId" class="inputCommandeId" />
            <button type="submit" class="confirm-btn">Modifier</button>
        </form>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Mettre à jour l'input hidden à chaque modification du textarea
        $('.textDescCat').on('input', function () {
            const value = $(this).val(); // Récupère la valeur du textarea
            $('.inputDescCat').val(value); // Met à jour la valeur de l'input hidden
        });

        $('.textDescMarque').on('input', function () {
            const value = $(this).val(); // Récupère la valeur du textarea
            $('.inputDescMarque').val(value); // Met à jour la valeur de l'input hidden
        });

        $('.addMarque').on('click', function () {
            let formAddMarque = $(".formAddMarque");
            if (formAddMarque.hasClass("hidden")) {
                formAddMarque.removeClass("hidden");
                formAddMarque.siblings().addClass("hidden");
            } else {
                formAddMarque.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }

        });

        $('.addCategorie').on('click', function () {
            let formAddCategorie = $(".formAddCategorie");
            if (formAddCategorie.hasClass("hidden")) {
                formAddCategorie.removeClass("hidden");
                formAddCategorie.siblings().addClass("hidden");
            } else {
                formAddCategorie.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }

        });

        $(".cancelAddMarque").on('click', function () {
            let formAddMarque = $(".formAddMarque");
            if (formAddMarque.hasClass("hidden")) {
                formAddMarque.removeClass("hidden");
                formAddMarque.siblings().addClass("hidden");
            } else {
                formAddMarque.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }
        })

        $(".cancelAddCategorie").on('click', function () {
            let formAddCategorie = $(".formAddCategorie");
            if (formAddCategorie.hasClass("hidden")) {
                formAddCategorie.removeClass("hidden");
                formAddCategorie.siblings().addClass("hidden");
            } else {
                formAddCategorie.addClass("hidden");
                let allMarques = $(".allMarques")
                allMarques.removeClass("hidden");
            }
        })

        $('.input-marque-formAdd').val($('.input-marque-formAdd option:selected').val());
        $('.inputMarque').val($('.input-marque-formAdd').val());

        $('.input-marque-formAdd').change(function () {
            $('.inputMarque').val($(this).val());
        });

        $(".formUpdateMarque .inputIsHomeMarque").on("click", function (event) {
            event.stopPropagation();
            // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
            $(this).closest("form").find(".submitUpdateMarque").removeClass("hidden");
        });

        // Gérer les clics sur les checkboxes dans les catégories
        $(".formUpdateCat .inputIsHomeCat").on("click", function (event) {
            event.stopPropagation();
            // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
            $(this).closest("form").find(".submitUpdateCategorie").removeClass("hidden");
        });

        var marques = document.querySelectorAll(".head-zone-marqueShow");
        marques.forEach((marque, index) => {
            marque.addEventListener('click', function () {
                var categories = document.querySelector(`#categories-${index}`);
                var icon = marque.querySelector("i");

                // Fermez toutes les autres sections de catégories
                var allCategories = document.querySelectorAll(".bottom-zone-marque");
                var allMarques = document.querySelectorAll(".head-zone-marqueShow");

                allCategories.forEach((categorie, i) => {
                    if (i !== index) {
                        categorie.classList.add("hidden");
                        allMarques[i].style.borderBottomLeftRadius = "15px";
                        allMarques[i].style.borderBottomRightRadius = "15px";
                        allMarques[i].querySelector("i").style.transform = "rotate(0deg)";
                    }
                });

                // Basculez la catégorie actuelle
                if (categories.classList.contains("hidden")) {
                    categories.classList.remove("hidden");
                    marque.style.borderBottomLeftRadius = "0px";
                    marque.style.borderBottomRightRadius = "0px";

                    icon.style.transition = "transform 0.5s ease";
                    icon.style.transform = "rotate(90deg)";
                } else {
                    categories.classList.add("hidden");
                    marque.style.borderBottomLeftRadius = "15px";
                    marque.style.borderBottomRightRadius = "15px";

                    icon.style.transform = "rotate(0deg)";
                }
            });
        });
    });
    $(document).ready(function () {
        $('.custom-checkbox').on('click', function () {
            // On met la valeur de l'input à true si la checkbox est cochée
            if ($(this).siblings('.inputActive').is(':checked')) {
                $(this).siblings('.inputActive').prop('checked', false);
            } else {
                $(this).siblings('.inputActive').prop('checked', true);
            }
        });

        // On ajoute une valeur à productActive en fonction des clics sur custom-checkbox
        $('.custom-checkbox').on('click', function () {
            // On met la valeur de l'input à true si la checkbox est cochée
            if ($(this).siblings('.inputActive').is(':checked')) {
                $(this).siblings('.inputActive').val('true');
            } else {
                $(this).siblings('.inputActive').val('false');
            }
        });
    });

    function ShowFormUpdateProfile() {
        const formZone = $('.form-zone');
        const userZone = $('.user-zone');
        const btnForm = $(".whenForm");
        const btnInfo = $(".whenInfos");

        // On récupère les valeurs dans les <p> display puis on met la valeur dans chaque input
        $('#nom').val($('#displayNom').text());
        $('#prenom').val($('#displayPrenom').text());
        $('#email').val($('#displayEmail').text());

        if (formZone.hasClass('hidden')) {
            formZone.removeClass('hidden');
            userZone.addClass('hidden');
            btnForm.removeClass('hidden');
            btnInfo.addClass('hidden');
        }
    }

    function CloseFormUpdateProfile() {
        const formZone = $('.form-zone');
        const userZone = $('.user-zone');
        const btnForm = $(".whenForm");
        const btnInfo = $(".whenInfos");

        formZone.addClass('hidden');
        userZone.removeClass('hidden');
        btnForm.addClass('hidden');
        btnInfo.removeClass('hidden');

        const inputs = formZone.find('input');
        inputs.each((index, input) => {
            input.value = input.defaultValue;
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        const toggleBtn = document.getElementById('toggleNav');
        const sideNav = document.getElementById('sideNav');
        const menuItems = sideNav.querySelectorAll('li');

        // On regarde si le cookie activeSection est déclaré
        const activeSection = document.cookie.split(';').find(cookie => cookie.includes('activeSection'));
        if (activeSection) {
            const sectionId = activeSection.split('=')[1];
            document.querySelector(`.${sectionId}`).classList.add('active');
        } else {
            // On enregistre le cookie activeSection pour info-account
            document.cookie = `activeSection=info-account; path=/`;
            document.querySelector('.info-account').classList.add('active');
        }

        // Gestion du toggle menu
        toggleBtn.addEventListener('click', () => {
            sideNav.classList.toggle('active');
        });

        // Fermeture du menu si clic hors du menu
        document.addEventListener('click', (event) => {
            if (!sideNav.contains(event.target) && !toggleBtn.contains(event.target)) {
                sideNav.classList.remove('active');
            }
        });

        // Gestion des sections
        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                const sectionId = item.getAttribute('data-section');

                // Masquer toutes les sections
                document.querySelectorAll('.info-sections > div').forEach(section => {
                    section.classList.remove('active');
                });

                // Afficher la section sélectionnée
                document.querySelector(`.${sectionId}`).classList.add('active');

                document.cookie = `activeSection=${sectionId}; path=/`;

                // Fermer le menu sur mobile
                sideNav.classList.remove('active');
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggleBtn = document.getElementById('toggleNav');
        const sideNav = document.getElementById('sideNav');

        toggleBtn.addEventListener('click', () => {
            sideNav.classList.toggle('active');
        });

        // Fermer le menu si on clique en dehors
        document.addEventListener('click', (event) => {
            if (!sideNav.contains(event.target)) {
                sideNav.classList.remove('active');
            }
        });

        // Gestion des clics sur les éléments du menu
        const menuItems = document.querySelectorAll('.side-nav li');
        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                CloseFormUpdateProfile();
                // Action personnalisée selon la classe de l'élément
                switch (true) {
                    case item.classList.contains('linkProfile'):
                        console.log('Navigation vers le profil');
                        break;
                    case item.classList.contains('linkCommande'):
                        console.log('Navigation vers les commandes');
                        break;
                    case item.classList.contains('linkProducts'):
                        console.log('Navigation vers les produits');
                        break;
                    case item.classList.contains('linkMarques'):
                        console.log('Navigation vers les produits');
                        break;

                }

                // Fermer le menu après la sélection
                sideNav.classList.remove('active');
            });
        });
    });
</script>

<script>
    // On récupère le bouton modifier
    const btnUpdate = $('.user-actions');
    const btnCancel = $('.cancel-btn');
    const btnConfirmUpdateProfie = $('.confirm-update-profile');

    // On récupère les 5 inputs du profil
    const inputs = $('.form-zone input');

    // On crée l'url de requête ajax
    const url = '@Url.Action("UpdateProfile", "Account")';

    // On lance la requête
    btnConfirmUpdateProfie.on('click', () => {
        // On regarde si le mot de passe actuel est renseigné, si non, on l'affiche dans l'erreur
        if ($('#password').val() === '') {
            $('.errorUpdateProfil').text('Veuillez renseigner votre mot de passe actuel.');
            return;
        }

        const data = {
            nom: $('#nom').val(),
            prenom: $('#prenom').val(),
            email: $('#email').val(),
            password: $('#password').val(),
            newPassword: $('#newPassword').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.errorMessage != "") {
                    // On affiche l'erreur dans le p errorUpdateProfil
                    $('.errorUpdateProfil').text(response.errorMessage);
                } else {
                    $('#displayNom').text(data.nom);
                    $('#displayPrenom').text(data.prenom);
                    $('#displayEmail').text(data.email);

                    // On ferme le formulaire
                    CloseFormUpdateProfile();
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    });

    // On ajoute un gestionnaire de click sur btnUpdate
    btnUpdate.on('click', () => {
        // On récupère la zone de formulaire
        ShowFormUpdateProfile();
    });

    btnCancel.on('click', () => {
        CloseFormUpdateProfile();
    });

    let errorMessage = '@errorMessage';
    console.log("Erreur : " + errorMessage);

    if (errorMessage !== '') {
        ShowFormUpdateProfile();
    }

    const addRowButton = $('.add-row');
    // on ajoute un gestionnaire d'événement sur le bouton d'ajout de ligne
    addRowButton.on('click', (e) => {
        e.preventDefault(); // Empêche la soumission du formulaire
        const table = $('#stockTable tbody');
        const lastRow = table.find('tr:last-child');
        const newRow = lastRow.clone(); // Clone la dernière ligne
        newRow.find('input').val(''); // Réinitialise les valeurs des inputs
        table.append(newRow); // Ajoute la nouvelle ligne à la fin du tableau

        let deleteCases = $('.caseDeleteRow');
        // On ajoute un gestionnaire d'événement pour chaque case
        deleteCases.each(function () {
            $(this).on('click', function () {
                console.log($('#stockTable tbody tr').length);
                // On supprime la ligne parent sauf si c'est la premier ligne du tableau
                if ($('#stockTable tbody tr').length > 1) {
                    $(this).parent().remove();
                }
            });
        });
    });

    // $('.addRowButton button').click(function () {
    //     // Création de la nouvelle ligne
    //     var newRow = $('<tr>');

    //     // Création des cellules avec les inputs
    //     var cells = `
    //             <td><input type="text" class="form-control" name="taille" placeholder="Taille"></td>
    //             <td><input type="number" class="form-control" name="quantite" placeholder="Quantité"></td>
    //             <td><input type="number" class="form-control" name="prix" placeholder="Prix" step="0.01"></td>
    //             <td><input type="number" class="form-control" name="promo" placeholder="Promotion" step="0.01"></td>
    //             <td><button class="btn btn-success confirm-btn addRowTableStock">Confirmer</button></td>
    //         `;

    //     // Ajout des cellules à la nouvelle ligne
    //     newRow.html(cells);

    //     // Insertion de la nouvelle ligne avant le bouton "Ajouter une ligne"
    //     $('.addRowButton').before(newRow);
    // });

    // $('.addRowTableStock').on('click' function () {
    //     // On récupère les valeurs des inputs qui sont dans le tr de "addRowButton"
    //     const taille = $(this).parent().siblings().find('input[name="taille"]').val();
    //     const quantite = $(this).parent().siblings().find('input[name="quantite"]').val();
    //     const prix = $(this).parent().siblings().find('input[name="prix"]').val();
    //     const promo = $(this).parent().siblings().find('input[name="promo"]').val();

    //     // On fait une requête ajax pour ajouter la nouvelle ligne en bdd
    //     $.ajax({
    //         url: '@Url.Action("AddRowTableStock", "Product")',
    //         type: 'POST',
    //         data: {
    //             taille: taille,
    //             quantite: quantite,
    //             prix: prix,
    //             promo: promo
    //         },
    //         success: function (response) {
    //             // On crée une nouvelle ligne avec les valeurs récupérées
    //             const newRow = `
    //                 <tr>
    //                     <td>${taille}</td>
    //                     <td>${quantite}</td>
    //                     <td>${prix}</td>
    //                     <td>${promo}</td>
    //                     <td class="updatePriceRow">Modifier</td>
    //                 </tr>
    //             `;

    //             // On ajoute la nouvelle ligne au tableau
    //             $('#stockTable tbody').append(newRow);
    //         },
    //         error: function (error) {
    //             console.error(error);
    //         }
    //     });
    // })

    let deleteCases = $('.caseDeleteRow');
    // On ajoute un gestionnaire d'événement pour chaque case
    deleteCases.each(function () {
        $(this).on('click', function () {
            console.log($('#stockTable tbody tr').length);
            // On supprime la ligne parent sauf si c'est la premier ligne du tableau
            if ($('#stockTable tbody tr').length > 1) {
                $(this).parent().remove();
            }
        });
    });


    $(document).ready(function () {
        $('.color-zone').on('click', function () {
            $(this).toggleClass('selectedColors');

            // Récupérer les couleurs sélectionnées
            const selectedColors = $('.color-zone.selectedColors')
                .map(function () {
                    return $(this).find('p').text();
                })
                .get(); // Convertir en tableau standard

            // Mettre à jour l'input caché avec les couleurs sélectionnées
            $('#productSelectedColors').val(selectedColors.join(','));
        });
    });

    let colorZones = $('.color-zone');
    let stockTable = $('#stockTable');
    let colorSelectedInput = $('#inputSelectedColors');
    let stockDataInput = $('#productStockData'); // Assure-toi que l’ID correspond bien

    colorZones.each(item => {
        $(this).on('click', function () {
            $(this).addClass('selectedColors');
        });
    });


    colorZones.each(item => {
        $(this).on('click', function () {
            $(this).toggleClass('selectedColors');

            // Récupérer les couleurs sélectionnées
            const selectedColors = $('.color-zone.selectedColors')
                .map(function () {
                    return $(this).find('p').text();
                })
                .get(); // Pour convertir l'objet jQuery en tableau standard

            colorSelectedInput.val(selectedColors.join(','));
        });
    });

    function getStockData() {
        const rows = document.querySelectorAll("#stockTable tbody tr");
        const stockData = [];

        rows.forEach(row => {
            const size = row.querySelector('.input-size')?.value || '';
            const quantity = row.querySelector('.input-quantity')?.value || '';
            const price = row.querySelector('.input-price')?.value || '';

            stockData.push({
                size: size,
                quantity: quantity,
                price: price
            });
        });

        return stockData;
    }

    // Met à jour les données dans l'input caché quand la table change
    stockTable.on('change', 'input', function () {
        const stockData = JSON.stringify(getStockData());
        stockDataInput.val(stockData); // Met à jour l'input caché
        console.log('Stock data updated:', stockData);
    });

    $(document).ready(function () {
        function updateCategorySelection() {
            const firstVisibleOption = $('.input-categorie option:visible').first();
            if (firstVisibleOption.length) {
                $('.input-categorie').val(firstVisibleOption.val());
                $('#productCategorie').val(firstVisibleOption.val());
            } else {
                // Aucune option visible, réinitialise complètement
                $('.input-categorie').val('');
                $('#productCategorie').val('');
            }
        }

        // Lors du changement de marque, filtre les catégories et met à jour la sélection
        $('.input-marque').on('change', function () {
            const selectedMarqueId = $(this).val();

            // Parcourt toutes les options des catégories
            $('.input-categorie option').each(function () {
                const idMarque = $(this).data('id-marque');
                if (idMarque == selectedMarqueId || !idMarque) {
                    $(this).show(); // Affiche les options correspondant à la marque
                } else {
                    $(this).hide(); // Cache les options qui ne correspondent pas
                }
            });

            // Met à jour la sélection de catégorie
            updateCategorySelection();

            // Met à jour la valeur de l'input caché de la marque
            $('#productMarque').val(selectedMarqueId);
            console.log('Marque sélectionnée :', selectedMarqueId);
        });

        // Lors du changement de catégorie, met à jour l'input caché "categorie"
        $('.input-categorie').on('change', function () {
            const selectedCategorieId = $(this).val();
            $('#productCategorie').val(selectedCategorieId);
            console.log('Catégorie sélectionnée :', selectedCategorieId);
        });

        updateCategorySelection();
    });
</script>

<script>
    const dropArea = document.getElementById('dropArea');
    const fileInput = document.getElementById('produitSources');
    const previewContainer = document.getElementById('previewContainer');

    // Utilisation de DataTransfer pour maintenir une liste de fichiers persistante
    let dt = new DataTransfer();

    // Empêche le comportement par défaut lors du dragover
    dropArea.addEventListener('dragover', (event) => {
        event.preventDefault();
    });

    // Gestion du drop des fichiers dans la zone de drop
    dropArea.addEventListener('drop', (event) => {
        event.preventDefault();
        const files = event.dataTransfer.files;
        addFilesToDataTransfer(files); // Ajoute les fichiers
    });

    // Ouvre l'explorateur de fichiers lorsqu'on clique sur la zone de drop
    dropArea.addEventListener('click', () => {
        fileInput.click();
    });

    // Gestion de l'ajout de fichiers via l'explorateur de fichiers
    fileInput.addEventListener('change', (event) => {
        const files = fileInput.files;
        addFilesToDataTransfer(files); // Ajoute les fichiers
    });

    function addFilesToDataTransfer(files) {
        // Parcourt les nouveaux fichiers et les ajoute à DataTransfer sans réinitialiser
        [...files].forEach(file => {
            dt.items.add(file);
            previewFile(file); // Ajoute un aperçu du fichier
        });
        updateInputFiles(); // Mets à jour l'input avec les nouveaux fichiers
    }

    function makeItemResponsive(item) {
        if (item.tagName === 'IMG') {
            item.classList.add('img-fluid');
        } else if (item.tagName === 'VIDEO') {
            item.classList.add('video-fluid');
        }
        item.style.maxWidth = '100%';
        item.style.height = 'auto';
    }

    function previewFile(file) {
        const fileReader = new FileReader();
        fileReader.onload = () => {
            const fileContainer = document.createElement('div');
            fileContainer.classList.add('file-container');

            // Affichage de l'aperçu du fichier
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = fileReader.result;
                makeItemResponsive(img);
                fileContainer.appendChild(img);
            } else if (file.type.startsWith('video/')) {
                const video = document.createElement('video');
                video.controls = true;
                video.src = fileReader.result;
                makeItemResponsive(video);
                fileContainer.appendChild(video);
            }

            // Ajoute une icône de suppression
            const deleteIcon = document.createElement('i');
            deleteIcon.className = "bi bi-trash delete-icon";
            deleteIcon.onclick = () => {
                event.stopPropagation();
                fileContainer.remove();
                removeFile(file); // Supprime le fichier si on clique sur la poubelle
            };
            fileContainer.appendChild(deleteIcon);

            // Ajoute l'aperçu dans la zone dédiée
            previewContainer.appendChild(fileContainer);
        };
        fileReader.readAsDataURL(file);
    }

    function updateInputFiles() {
        // Met à jour le fileInput avec les fichiers dans DataTransfer
        fileInput.files = dt.files;
    }

    function removeFile(fileToRemove) {
        // Supprime un fichier du DataTransfer
        const newDataTransfer = new DataTransfer();
        [...dt.files].forEach(file => {
            if (file !== fileToRemove) {
                newDataTransfer.items.add(file); // Ajoute les fichiers sauf celui à supprimer
            }
        });
        dt = newDataTransfer; // Remplace l'ancien DataTransfer par le nouveau
        updateInputFiles(); // Met à jour l'input
    }
</script>

<script>
    let btnAddProduct = $(".addProduct");
    let formAddProduct = $(".formAddProduct");
    let allProducts = $(".allProducts");

    btnAddProduct.on('click', () => {
        if (formAddProduct.hasClass('hidden')) {
            formAddProduct.removeClass('hidden');
            allProducts.addClass('hidden');
        } else {
            formAddProduct.addClass('hidden');
            allProducts.removeClass('hidden');
        }
    });

    let btnPrecedent = $(".precedentButton");
    let formZone = $(".formAddProduct");

    btnPrecedent.each((index, btn) => {
        $(btn).on('click', () => {
            // On récupère le champ data-id
            let id = $(btn).data('id');
            let currentZone = $(`.content-zone[data-order="${id}"]`);
            let previousZone = $(`.content-zone[data-order="${id - 1}"]`);
            let previousBtns = $(`.btns-close[data-order="${id - 1}"]`);
            currentZone.removeClass('active');
            previousZone.addClass('active');
            previousBtns.addClass('activeBtns');
            previousBtns.siblings().removeClass('activeBtns');
        });
    });


    let btnsClose = $(".btns-close");
    let cancelBtn = btnsClose.find('.cancel-btn');
    let nextBtn = btnsClose.find('.nextAddProduct');

    nextBtn.each((index, btn) => {
        $(btn).on('click', () => {
            // On récupère le champ data-id
            let id = $(btn).data('id');
            let currentZone = $(`.content-zone[data-order="${id}"]`);
            if (id < 3) {
                let nextZone = $(`.content-zone[data-order="${id + 1}"]`);
                let nextBtns = $(`.btns-close[data-order="${id + 1}"]`);
                currentZone.removeClass('active');
                nextZone.addClass('active');
                nextBtns.addClass('activeBtns');
                nextBtns.siblings().removeClass('activeBtns');
            }
            else {
                let nextZone = $(`.content-zone[data-order="${id + 1}"]`);
                let nextBtns = $(`.btns-close[data-order="${id + 1}"]`);
                currentZone.removeClass('active');
                nextZone.addClass('active');
                nextBtns.addClass('activeBtns');
                nextBtns.siblings().removeClass('activeBtns');
            }

        });
    })

    cancelBtn.each((index, btn) => {
        $(btn).on('click', () => {
            let formAddProduct = $(".formAddProduct");
            let allProducts = $(".allProducts");

            if (formAddProduct.hasClass('hidden')) {
                formAddProduct.removeClass('hidden');
                allProducts.addClass('hidden');
            } else {
                formAddProduct.addClass('hidden');
                allProducts.removeClass('hidden');
            }

            const inputs = formZone.find('input');
            inputs.each((index, input) => {
                input.value = input.defaultValue;
            });

            const textareas = formZone.find('textarea');
            textareas.each((index, textarea) => {
                textarea.value = textarea.defaultValue;
            });

            const checkboxes = formZone.find('input[type="checkbox"]');
            checkboxes.each((index, checkbox) => {
                checkbox.checked = checkbox.defaultChecked;
            });

            const stockTable = formZone.find('#stockTable');
            stockTable.find('tbody tr').remove();

            const previewContainer = formZone.find('#previewContainer');
            previewContainer.empty();

            const colorZones = formZone.find('.color-zone');
            colorZones.each((index, colorZone) => {
                $(colorZone).removeClass('selectedColors');
            });

            const selectedColorsInput = formZone.find('#productSelectedColors');
            selectedColorsInput.val('');

            const stockDataInput = formZone.find('#productStockData');
            stockDataInput.val('');

            const generalInfos = formZone.find('.general-infos');
            generalInfos.addClass('active');
            generalInfos.siblings().removeClass('active');

            // On remet le premier content zone actif
            let firstContentZone = $(`.content-zone[data-order="1"]`);
            firstContentZone.addClass('active');
            firstContentZone.siblings().removeClass('active');

            // On remet le premier btns-close actif
            let firstBtnsClose = $(`.btns-close[data-order="1"]`);
            firstBtnsClose.addClass('activeBtns');
            firstBtnsClose.siblings().removeClass('activeBtns');
        });
    });


    let divActive = $(".activeBtns");
    let divSecond = $(".btns-second");
    let divThird = $(".btns-third");

    let btnNext = $(".nextAddProduct");
    let btnPrev = $(".btns-second .confirm-btn");
    let btnPrev2 = $(".btns-third .confirm-btn");
</script>

<script>
    $(".formUpdateActiveProduct .inputActiveProduct").on("click", function (event) {
        event.stopPropagation();
        // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
        $(this).closest("div").find(".btnUpdateProductActive").removeClass("hidden");
    });

    $(".formUpdateTendanceProduct .inputTendanceProduct").on("click", function (event) {
        event.stopPropagation();
        // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
        $(this).closest("div").find(".btnUpdateProductTendance").removeClass("hidden");
    });

    $(".formUpdateHomeMarque .inputActiveMarque").on("click", function (event) {
        event.stopPropagation();
        // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
        $(this).closest("div").find(".btnUpdateMarqueHome").removeClass("hidden");
    });

    $(".formUpdateHomeCategory .inputActiveCategory").on("click", function (event) {
        event.stopPropagation();
        // Cibler le bouton dans le même formulaire et enlever la classe 'hidden'
        $(this).closest("div").find(".btnUpdateCategoryHome").removeClass("hidden");
    });

    $(".btnUpdateCategoryHome").on('click', function (event) {
        const button = $(this); // Sauvegarde de la référence au bouton
        const url = '@Url.Action("UpdateTendanceCategory", "Categorie")';
        const data = {
            id: button.siblings('input[name="categoryId"]').val(),
            tendance: button.siblings('input[name="tendance"]').prop('checked')
        };

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.errorMessage != "") {
                    $('.errorUpdateCategory').text(response.errorMessage);
                } else {
                    button.addClass('hidden'); // Utilisation explicite de la référence
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    });

    $(".btnUpdateMarqueHome").on('click', function (event) {
        const button = $(this); // Sauvegarde de la référence au bouton
        const url = '@Url.Action("UpdateMarque", "Marque")';
        const data = {
            id: button.siblings('input[name="marqueId"]').val(),
            tendance: button.siblings('input[name="tendance"]').prop('checked')
        };

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.errorMessage != "") {
                    $('.errorUpdateMarque').text(response.errorMessage);
                } else {
                    button.addClass('hidden'); // Utilisation explicite de la référence
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    });

    $(".btnUpdateProductTendance").on('click', function (event) {
        const button = $(this); // Sauvegarde de la référence au bouton
        const url = '@Url.Action("UpdateTendance", "Product")';
        const data = {
            id: button.siblings('input[name="productId"]').val(),
            tendance: button.siblings('input[name="tendance"]').prop('checked')
        };

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.errorMessage != "") {
                    $('.errorUpdateProfil').text(response.errorMessage);
                } else {
                    button.addClass('hidden'); // Utilisation explicite de la référence
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    });

    $(".btnUpdateProductActive").on('click', function (event) {
        const button = $(this); // Sauvegarde de la référence au bouton
        const url = '@Url.Action("UpdateActive", "Product")';
        const data = {
            id: button.siblings('input[name="productId"]').val(),
            active: button.siblings('input[name="active"]').prop('checked')
        };

        console.log(data);

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.errorMessage != "") {
                    $('.errorUpdateProfil').text(response.errorMessage);
                } else {
                    button.addClass('hidden'); // Utilisation explicite de la référence
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    });

    function getSelectOptionsHtml(){
        // On fait le select allant de 36 à 48 avec un pas de 0.5
        let options = '';
        for (let i = 36; i <= 48; i += 0.5) {
            options += `<option value="${i}">${i}</option>`;
        }
        return options;
    }

    $('.table-stock .confirm-btn').click(function () {
        // Trouver la ligne "ajouter" et ajouter une nouvelle ligne avec des input pour la taille, la quantité, le prix et le prix en promo et un bouton valider après la ligne du produit
        var newRow = "";
        newRow += `<tr><td><select class="input-size">${getSelectOptionsHtml()}</select></td>`;
        newRow += `
            <td><input type="number" class="form-control" name="quantite" placeholder="Quantité" min="0"></td>
            <td><input type="number" class="form-control" name="prix" placeholder="Prix" step="0.01" min="0"></td>
            <td><input type="number" class="form-control" name="promo" placeholder="Promotion" step="0.01" min="0"></td>
            <td class="btn btn-success confirm-btn addRowTableStock" style="border-radius: 0px;">Confirmer</td>
        `;
        newRow += "</tr>";

        // Ajoute la nouvelle ligne sous chaque ligne de produit
        $(this).closest('tr').before(newRow);
    });

    $(document).on("click", ".addRowTableStock", function () {
        // On récupère les valeurs des inputs qui sont dans le tr de "addRowButton"
        const row = $(this).parent();
        const taille = row.find('select').val();
        const quantite = row.find('input[name="quantite"]').val();
        const prix = row.find('input[name="prix"]').val();
        const promo = row.find('input[name="promo"]').val();

        // On récupère l'id du produit
        const productId = row.parent().data("id-produit");

        console.log("Taille:", taille, "Quantité:", quantite, "Prix:", prix, "Promo:", promo, "ProductId:", productId);

        // Vérifier que les valeurs ne sont pas vides avant l'ajax
        if (!taille || !quantite || !prix) {
            alert("Veuillez remplir tous les champs obligatoires !");
            return;
        }

        // On fait une requête ajax pour ajouter la nouvelle ligne en bdd
        $.ajax({
            url: '/Product/AddRowTableStock', // Mets bien l'URL complète
            type: 'POST',
            data: {
                id: productId,
                taille: taille,
                quantite: quantite,
                prix: prix,
                promo: promo
            },
            success: function (response) {
                console.log("Réponse AJAX:", response);

                // On crée une nouvelle ligne avec les valeurs récupérées
                const newRow = `
                    <tr>
                        <td>${taille}</td>
                        <td>${quantite}</td>
                        <td>${prix}</td>
                        <td>${promo}</td>
                        <td class="updatePriceRow">Modifier</td>
                    </tr>
                `;

                // On ajoute la nouvelle ligne au tableau au dessus du bouton "Ajouter"
                row.before(newRow);


                // Supprime la ligne d'ajout
                row.remove();
            },
            error: function (error) {
                console.error("Erreur AJAX:", error);
                alert("Erreur lors de l'ajout du stock !");
            }
        });
    });


    let deroulesStock = $(".showMoreStock");
    // On affiche les stocks quand on clique sur le bouton
    deroulesStock.each((index, deroule) => {
        $(deroule).on('click', () => {
            let stockList = $(deroule).parent().siblings('.stockList');
            if (stockList.hasClass('hidden')) {
                stockList.removeClass('hidden');
                $(deroule).text('Voir moins');
            } else {
                stockList.addClass('hidden');
                $(deroule).text('Voir plus');
            }
        });
    });

    let deroulesCategory = $(".showMoreCategory");
    // On affiche les stocks quand on clique sur le bouton
    deroulesCategory.each((index, deroule) => {
        $(deroule).on('click', () => {
            let stockList = $(deroule).parent().siblings('.categoryList');
            if (stockList.hasClass('hidden')) {
                stockList.removeClass('hidden');
                $(deroule).text('Voir moins');
            } else {
                stockList.addClass('hidden');
                $(deroule).text('Voir plus');
            }
        });
    });

    // On attache l'événement "Update" à un parent statique
    $(document).ready(function () {

        // On ajoute un gestionnaire d'événement pour chaque bouton supprimer
        let deleteButtons = $('.delete-product');
        let deleteButtonsMarque = $('.delete-marque');
        let productId;
        let marqueId;

        // Ouvrir le modal au clic sur un bouton de suppression
        deleteButtons.each((index, button) => {
            $(button).on('click', function () {
                productId = undefined;
                marqueId = undefined;
                productId = $(button).data('product-id'); // Récupérer l'ID du produit
                $('.modal-delete').fadeIn(); // Afficher le modal
            });
        });

        deleteButtonsMarque.each((index, button) => {
            $(button).on('click', function () {
                productId = undefined;
                marqueId = undefined;
                marqueId = $(button).data('marque-id'); // Récupérer l'ID du produit
                $('.modal-delete').fadeIn(); // Afficher le modal
            });
        });

        // Confirmer la suppression
        $('.modal-delete .confirm-btn').on('click', function () {
            if (productId) {
                // Envoi de la requête AJAX pour supprimer le produit
                $.ajax({
                    url: `/Product/DeleteProduct?id=${productId}`,
                    type: 'POST',
                    success: function (response) {
                        console.log('Produit supprimé:', response);

                        // Supprimer le produit du DOM
                        $(`.delete-product[data-id-produit="${productId}"]`).closest('.product-item').remove();

                        // Fermer le modal
                        $('.modal-delete').fadeOut();
                    },
                    error: function (error) {
                        console.error('Erreur lors de la suppression:', error);
                    }
                });
            }

            if (marqueId) {
                // Envoi de la requête AJAX pour supprimer le produit
                $.ajax({
                    url: `/Marque/DeleteMarque?id=${marqueId}`,
                    type: 'POST',
                    success: function (response) {
                        console.log('Produit supprimé:', response);

                        // Supprimer la marque du DOM
                        $(`.delete-marque[data-marque-id="${marqueId}"]`).closest('.marque').remove();

                        // Fermer le modal
                        $('.modal-delete').fadeOut();
                    },
                    error: function (error) {
                        console.error('Erreur lors de la suppression:', error);
                    }
                });
            }
        });

        // Annuler et fermer le modal
        $('.modal-delete .cancel-btn').on('click', function () {
            $('.modal-delete').fadeOut(); // Fermer le modal
        });

        // Optionnel : fermer le modal en cliquant en dehors du contenu
        $('.modal-delete').on('click', function (e) {
            if ($(e.target).is('.modal-delete')) {
                $('.modal-delete').fadeOut();
            }
        });

        // Événement délégué pour le bouton "Modifier"
        let stockTable = $('#stockTable');
        console.log(stockTable);
        $('#stockTableShow tbody').on('click', '.updatePriceRow', function () {

            let btn = $(this); // Le bouton (td)
            let row = btn.closest('tr'); // La ligne parente
            let cells = row.find('td'); // Toutes les cellules de la ligne

            // Récupération des anciennes valeurs
            let stock = cells.eq(1).text().trim();
            let prix = cells.eq(2).text().trim();
            let promo = cells.eq(3).text().trim();

            // Remplace les valeurs par des champs d'input
            cells.eq(1).html(`<input type="number" value="${stock}" class="input-stock" />`);
            cells.eq(2).html(`<input type="number" value="${prix}" class="input-price" />`);
            cells.eq(3).html(`<input type="number" value="${promo}" class="input-promo" />`);

            // Change le bouton pour "Confirmer"
            btn.text('Confirmer').removeClass('updatePriceRow').addClass('confirmUpdatePriceRow').addClass('confirm-btn');

            // Ajoute un bouton "Annuler" à la fin de la ligne
            if (!row.find('.cancelUpdatePriceRow').length) {
                row.append('<td class="cancelUpdatePriceRow cancel-btn">Annuler</td>');
            }

            let thead = $('#stockTableShow thead tr');
            thead.append('<th class="headBtnCancel"></th>');
        });

        // Événement délégué pour le bouton "Confirmer"
        $('#stockTableShow tbody').on('click', '.confirmUpdatePriceRow', function () {

            let btn = $(this); // Le bouton (td)
            let row = btn.closest('tr'); // La ligne parente
            let inputs = row.find('input'); // Tous les champs d'input de la ligne

            // Récupération des nouvelles valeurs
            let stock = inputs.eq(0).val().trim();
            let prix = inputs.eq(1).val().trim();
            let promo = inputs.eq(2).val().trim();

            // Replace les champs d'input par les nouvelles valeurs
            inputs.eq(0).parent().text(stock);
            inputs.eq(1).parent().text(prix);
            inputs.eq(2).parent().text(promo);

            // Change le bouton pour "Modifier"
            btn.text('Modifier').removeClass('confirmUpdatePriceRow').addClass('updatePriceRow');

            // Supprime le bouton "Annuler"
            row.find('.cancelUpdatePriceRow').remove();

            let thead = $('#stockTableShow thead tr');
            thead.find('.headBtnCancel').remove();

            // Récupère l'ID produit et taille depuis les attributs de la ligne
            let productId = row.data('id-produit');
            let size = row.data('id-taille');

            // Crée l'objet JSON correspondant à la classe C#
            let stockItem = {
                size: size.toString(),
                quantity: stock,
                price: prix,
                priceProm: promo
            };

            // Envoi des données au serveur via AJAX
            let data = JSON.stringify(stockItem);
            let url = `/Product/UpdateStockProduct?id=${productId}&stockData=${data}`;

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json', // Indique que les données envoyées sont en JSON
                success: function (response) {
                    alert('Mise à jour effectuée avec succès.');
                },
                error: function (error) {
                    console.error('Erreur lors de la mise à jour:', error);
                    alert('Erreur lors de la mise à jour. Veuillez réessayer.');
                }
            });
        });

        // Événement délégué pour le bouton "Annuler"
        $('#stockTableShow tbody').on('click', '.cancelUpdatePriceRow', function () {

            let btn = $(this); // Le bouton (td)
            let row = btn.closest('tr'); // La ligne parente
            let inputs = row.find('input'); // Tous les champs d'input de la ligne

            // Récupération des anciennes valeurs
            let stock = inputs.eq(0).attr('value'); // La valeur initiale dans l'attribut
            let prix = inputs.eq(1).attr('value');
            let promo = inputs.eq(2).attr('value');

            // Replace les champs d'input par les anciennes valeurs
            inputs.eq(0).parent().text(stock);
            inputs.eq(1).parent().text(prix);
            inputs.eq(2).parent().text(promo);

            // Change le bouton pour "Modifier"
            row.find('.confirmUpdatePriceRow')
                .text('Modifier')
                .removeClass('confirmUpdatePriceRow')
                .addClass('updatePriceRow');

            // Supprime le bouton "Annuler"
            btn.remove();

            let thead = $('#stockTableShow thead tr');
            thead.find('.headBtnCancel').remove();
        });
    });



</script>

<script>
    // On gère la modification du prix du mode de livraison
    let btnUpdateDelivery = $(".update-delivery-mode");

    // On ajoute un gestionnaire d'événement pour chaque bouton
    btnUpdateDelivery.each((index, button) => {
        $(button).on('click', () => {
            event.preventDefault();
            // On récupère le data-mode-id
            let modeId = $(button).data('mode-id');
            // On récupère la valeur de l'input à cote
            let price = $(button).siblings('.input-price').val();
            // On récupère la valeur de l'input à cote
            let deliveryTime = $(button).siblings('.input-delivery-time').val();

            // On effectue une requête AJAX pour modifier le prix
            $.ajax({
                url: `/Panier/UpdateDeliveryPrice?idModeLivraison=${modeId}&newPrice=${price}&deliveryTime=${deliveryTime}`,
                type: 'POST',
                success: function (response) {
                    alert('Prix modifié avec succès.');
                },
                error: function (error) {
                    console.error('Erreur lors de la modification:', error);
                    alert('Erreur lors de la modification. Veuillez réessayer.');
                }
            });
        });
    });

</script>

<script>

    // Fermeture du modal avec le bouton "Annuler"
    $('.cancel-btn').on('click', function () {
        $('.modal-status-commande').fadeOut();
    });

    // Fermeture du modal en cliquant en dehors du contenu
    $('.modal-status-commande').on('click', function (e) {
        if ($(e.target).is('.modal-status-commande')) {
            $('.modal-status-commande').fadeOut();
        }
    });
</script>

<script>
    // gestionnaire de click sur showMoreCommande
    let showMoreCommande = $(".showMoreCommande");
    showMoreCommande.on('click', function () {
        let commandeList = $(this).parent().siblings('.details-commande');
        if (commandeList.hasClass('hidden')) {
            commandeList.removeClass('hidden');
            $(this).text('Masquer détails');
        } else {
            commandeList.addClass('hidden');
            $(this).text('Voir détails');
        }
    });

    // gestionnaire de click sur showActions
    let showMoreActions = $(".showActions");
    showMoreActions.on('click', function () {
        let actionsList = $(this).parent().siblings('.actions-commande');
        if (actionsList.hasClass('hidden')) {
            actionsList.removeClass('hidden');
            $(this).text('Masquer actions');
        } else {
            actionsList.addClass('hidden');
            $(this).text('Voir actions');
        }
    });

    let factureCommande = $(".facture");
    factureCommande.on('click', function () {
        // on récupère le data-commande-id
        let commandeId = $(this).data('commande-id');

        // On fait une requête POST ajax vers DownloadEtiquette de PanierController
        $.ajax({
            url: `/Panier/GetCommande?numberOrder=${commandeId}`,
            type: 'POST',
            success: function (response) {
                // Décoder la facture Base64 en tableau de bytes
                const binaryString = atob(response.facture);
                const byteArray = Uint8Array.from(binaryString, char => char.charCodeAt(0));

                // Créer un Blob pour le PDF
                const pdfBlob = new Blob([byteArray], { type: "application/pdf" });

                // Créer une URL pour le Blob
                const pdfUrl = URL.createObjectURL(pdfBlob);

                // Créer un lien pour télécharger le PDF
                const link = document.createElement("a");
                link.href = pdfUrl;
                link.download = `facture_commande_${commandeId}.pdf`;

                // Ajouter le lien, déclencher le clic et le supprimer
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                // Libérer la mémoire
                URL.revokeObjectURL(pdfUrl);
            },
            error: function (error) {
                console.error('Erreur lors du téléchargement:', error);
            }
        });
    });


    // gestionnaire de click sur la div etiquette
    let etiquetteCommande = $(".etiquette");
    etiquetteCommande.on('click', function () {
        // on récupère le data-commande-id
        let commandeId = $(this).data('commande-id');

        // On fait une requête POST ajax vers DownloadEtiquette de PanierController
        $.ajax({
            url: `/Panier/GetCommande?numberOrder=${commandeId}`,
            type: 'POST',
            success: function (response) {
                // Décoder le Base64 en tableau de bytes
                const binaryString = atob(response.etiquette); // Décodage Base64
                const byteArray = Uint8Array.from(binaryString, char => char.charCodeAt(0)); // Conversion en tableau de bytes

                // Créer un Blob pour représenter le GIF
                const gifBlob = new Blob([byteArray], { type: "image/gif" });

                // Charger le GIF dans une balise <img>
                const gifUrl = URL.createObjectURL(gifBlob);
                const img = new Image();
                img.src = gifUrl;

                img.onload = function () {
                    // Créer un canvas pour convertir l'image en PNG
                    const canvas = document.createElement("canvas");
                    canvas.width = img.width;
                    canvas.height = img.height;

                    const ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0);

                    // Extraire l'image PNG du canvas
                    canvas.toBlob(function (pngBlob) {
                        // Créer une URL pour le Blob PNG
                        const pngUrl = URL.createObjectURL(pngBlob);

                        // Créer un lien pour le téléchargement
                        const link = document.createElement("a");
                        link.href = pngUrl;
                        link.download = `etiquette_commande_${commandeId}.png`;

                        // Ajouter le lien, déclencher le clic et le supprimer
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);

                        // Libérer la mémoire
                        URL.revokeObjectURL(pngUrl);
                        URL.revokeObjectURL(gifUrl);
                    }, "image/png");
                };

                img.onerror = function () {
                    console.error("Impossible de charger l'image GIF.");
                };
            },
            error: function (error) {
                console.error('Erreur lors du téléchargement:', error);
            }
        });
    });

    $(document).ready(function () {
        // Ouvrir le modal
        $(".open-modal-btn").on("click", function () {
            const commandeId = $(this).data("commande-id");
            const statutActuelId = $(this).data("status-id");
            $(".modal-status-commande .inputCommandeId").val(commandeId);

            // On ajoute les status dans le select InputStatut
            const statusList = @Html.Raw(Json.Serialize(Model.StatutCommandes.Select(s => s.Libelle).ToList()));
            const statusId = @Html.Raw(Json.Serialize(Model.StatutCommandes.Select(s => s.Id).ToList()));
            const selectInput = $(".modal-status-commande .inputStatut");
            selectInput.empty(); // On vide les options actuelles

            for (var i = 0; i < statusList.length; i++) {
                if (statusId[i] >= statutActuelId) {
                    const option = `<option value="${statusId[i]}">${statusList[i]}</option>`;
                    selectInput.append(option);
                }
            }

            // Bloquer le scroll
            $("body").css("overflow", "hidden");

            // Afficher le modal
            $(".modal-status-commande").fadeIn();
        });

        // Fermer le modal
        $(".modal-status-commande").on("click", function (e) {
            if ($(e.target).hasClass("modal-status-commande")) {
                $(this).fadeOut();

                // Réactiver le scroll
                $("body").css("overflow", "auto");
            }
        });

        // Réactiver le scroll après soumission (si nécessaire)
        $("form").on("submit", function () {
            $(".modal-status-commande").fadeOut();
            $("body").css("overflow", "auto");
        });
    });

</script>

<script>
    function formatDate(dateString) {
        let date = new Date(dateString);

        let day = String(date.getDate()).padStart(2, '0'); // Jour (avec zéro devant si < 10)
        let month = String(date.getMonth() + 1).padStart(2, '0'); // Mois (commence à 0, donc +1)
        let year = date.getFullYear(); // Année
        let hours = String(date.getHours()).padStart(2, '0'); // Heures
        let minutes = String(date.getMinutes()).padStart(2, '0'); // Minutes
        let seconds = String(date.getSeconds()).padStart(2, '0'); // Secondes

        return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
    }

    $(".add-code-promo").on("click", function () {
        let formAddCodePromo = $(".form");
        formAddCodePromo.removeClass('hidden');

        $(".list-code-promos").addClass('hidden');
    })

    // On fait en sorte que la div .form disparaisse si je clique sur cancel-add-code-promo
    let cancelAddCodePromo = $(".cancel-add-code-promo");
    cancelAddCodePromo.on('click', function () {
        let formAddCodePromo = $(".form");
        formAddCodePromo.addClass('hidden');
        $(".list-code-promos").removeClass('hidden');
    });

    let confirmAddCodePromo = $(".confirm-add-code-promo");
    confirmAddCodePromo.on('click', function () {
        // On cache tous les error-code
        $(".error-code").css("display", "none");

        // On contrôle si le nom du code est rempli
        let stop = false;
        let nomCode = $(".input-nom-code").val();
        if (nomCode === "") {
            $(".error-nom-code").text("Veuillez remplir le nom du code promo.");
            $(".error-nom-code").css("display", "block");
            stop = true;
        }

        // On contrôle si le pourcentage est rempli
        let pourcentageCode = $(".input-pourcentage-code").val();
        if (pourcentageCode === "") {
            $(".error-pourcentage-code").text("Veuillez remplir le pourcentage du code promo.");
            $(".error-pourcentage-code").css("display", "block");
            stop = true;
        }

        // On regarde si le pourcentage est compris entre 1 et 100
        if (pourcentageCode < 1 || pourcentageCode > 100) {
            $(".error-pourcentage-code").text("Le pourcentage doit être compris entre 1 et 100.");
            $(".error-pourcentage-code").css("display", "block");
            stop = true;
        }

        // On contrôle si la date de fin est remplie
        let dateCode = $(".input-date-code").val();
        if (dateCode === "") {
            $(".error-date-code").text("Veuillez remplir la date de fin du code promo.");
            $(".error-date-code").css("display", "block");
            stop = true;
        }

        // On contrôle si la date de fin est supérieure à la date actuelle
        let dateActuelle = new Date();
        let dateValidity = new Date(dateCode);
        if (dateValidity < dateActuelle) {
            $(".error-date-code").text("La date de fin doit être supérieure à la date actuelle.");
            $(".error-date-code").css("display", "block");
            stop = true;
        }

        if (stop == true) {
            return;
        }

        let code = $(".input-nom-code").val();
        let reduction = $(".input-pourcentage-code").val();
        let dateFin = $(".input-date-code").val();
        let isValid = $(".input-valid-code").prop('checked');

        // On effectue une requête AJAX pour ajouter le code promo
        $.ajax({
            url: `/Panier/AddCodePromo?code=${code}&reduction=${reduction}&dateFin=${dateFin}&valid=${isValid}`,
            type: 'POST',
            success: function (response) {
                let formAddCodePromo = $(".form");
                formAddCodePromo.addClass('hidden');

                // On réinitialise les 4 inputs
                $(".input-nom-code").val('');
                $(".input-pourcentage-code").val('');
                $(".input-date-code").val('');
                $(".input-valid-code").prop('checked', false);

                // On ajoute une ligne à list-code-promo
                let newRow = `
                    <tr>
                        <td>${response.code.nom}</td>
                        <td>${response.code.pourcentage}</td>
                        <td>${formatDate(response.code.validityDate)}</td>
                        <td>
                            <input type="checkbox" class="inputValidity" ${response.code.isValid ? 'checked' : ''} />
                        </td>
                        <td class="confirm-btn delete-code-promo" data-code-id="${response.id}">
                            Supprimer
                        </td>
                    </tr>
                `;


                console.log(newRow);

                $(".list-code").append(newRow);
                $(".list-code-promos").removeClass('hidden');



            },
            error: function (error) {
                console.error('Erreur lors de l\'ajout:', error);
                alert('Erreur lors de l\'ajout. Veuillez réessayer.');
            }
        });
    });


    // On ajoute un gestionnaire de clic sur chaque delete-code-promo
    $(document).on('click', '.delete-code-promo', function () {
        let codeId = $(this).data('code-id');

        $.ajax({
            url: `/Panier/DeleteCodePromo?id=${codeId}`,
            type: 'POST',
            success: function (response) {
                $(`.delete-code-promo[data-code-id="${codeId}"]`).closest('tr').remove();
            },
            error: function (error) {
                console.error('Erreur lors de la suppression:', error);
                alert('Erreur lors de la suppression. Veuillez réessayer.');
            }
        });
    });

    // On met un gestionnaire d'événement quand inputValidity change
    $(document).on('change', '.inputValidity', function () {
        // On récupère le delete-code-promo le plus proche
        let deleteItem = $(this).closest('tr').find('.delete-code-promo');
        let codeId = deleteItem.data('code-id');
        
        let isValid = $(this).prop('checked');

        $.ajax({
            url: `/Panier/UpdateCodePromo?id=${codeId}&valid=${isValid}`,
            type: 'POST',
            success: function (response) {
                console.log('Code promo mis à jour:', response);
            },
            error: function (error) {
                console.error('Erreur lors de la mise à jour:', error);
                alert('Erreur lors de la mise à jour. Veuillez réessayer.');
            }
        });
    });
</script>